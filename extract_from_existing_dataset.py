#!/usr/bin/env python3
"""
–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞—Ç–∞—Å–µ—Ç–æ–≤ Apify
"""

import os
import json
from dotenv import load_dotenv
from apify_client import ApifyClient
from pymongo import MongoClient

load_dotenv()
load_dotenv('mongodb_config.env')

def extract_from_dataset(dataset_id: str, limit: int = 100):
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞"""
    
    api_token = os.getenv("APIFY_API_TOKEN")
    if not api_token:
        print("‚ùå APIFY_API_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
        return
    
    client = ApifyClient(api_token)
    
    try:
        print(f"üîç –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –¥–∞—Ç–∞—Å–µ—Ç–∞: {dataset_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –¥–∞—Ç–∞—Å–µ—Ç–∞
        dataset = client.dataset(dataset_id)
        items = dataset.list_items(limit=limit)
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ {items.total} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        
        if not items.items:
            print("‚ùå –î–∞—Ç–∞—Å–µ—Ç –ø—É—Å—Ç–æ–π")
            return
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
        print(f"\nüìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö:")
        sample_item = items.items[0]
        print(f"   –ö–ª—é—á–∏: {list(sample_item.keys())}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        images_data = []
        for i, item in enumerate(items.items):
            print(f"   –û–±—Ä–∞–±–æ—Ç–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ {i+1}/{len(items.items)}")
            
            # –ò—â–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—è—Ö
            image_urls = []
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ–ª—è
            for field in ['imageUrl', 'image', 'url', 'mediaUrl', 'thumbnailUrl']:
                if field in item and item[field]:
                    if isinstance(item[field], list):
                        image_urls.extend(item[field])
                    else:
                        image_urls.append(item[field])
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            if image_urls:
                for j, img_url in enumerate(image_urls):
                    if img_url and 'instagram.com' in img_url:
                        images_data.append({
                            'url': img_url,
                            'post_url': item.get('url', ''),
                            'caption': item.get('caption', ''),
                            'likes': item.get('likes', 0),
                            'comments': item.get('comments', 0),
                            'publication_date': item.get('date', ''),
                            'account_name': item.get('username', ''),
                            'hashtags': item.get('hashtags', []),
                            'source': 'apify_dataset',
                            'dataset_id': dataset_id
                        })
        
        print(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(images_data)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        output_file = f"extracted_images_{dataset_id}.json"
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(images_data, f, ensure_ascii=False, indent=2)
        
        print(f"üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {output_file}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ MongoDB
        save_to_mongodb(images_data)
        
        return images_data
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è: {e}")

def save_to_mongodb(images_data):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ MongoDB"""
    try:
        client = MongoClient(os.getenv('MONGODB_URI', 'mongodb://trend_ai_user:|#!x1K52H.0{8d3@localhost:27017/instagram_gallery'))
        db = client["instagram_gallery"]
        collection = db["images"]
        
        saved_count = 0
        for img_data in images_data:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            existing = collection.find_one({"url": img_data["url"]})
            if not existing:
                collection.insert_one(img_data)
                saved_count += 1
        
        print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved_count} –Ω–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ MongoDB")
        client.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ MongoDB: {e}")

def list_available_datasets():
    """–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç–∞—Å–µ—Ç–æ–≤"""
    
    api_token = os.getenv("APIFY_API_TOKEN")
    if not api_token:
        print("‚ùå APIFY_API_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
        return
    
    client = ApifyClient(api_token)
    
    try:
        print("üìä –î–û–°–¢–£–ü–ù–´–ï –î–ê–¢–ê–°–ï–¢–´:")
        print("=" * 50)
        
        datasets = client.datasets().list(limit=20)
        
        for i, dataset in enumerate(datasets.items, 1):
            print(f"{i}. {dataset.name}")
            print(f"   ID: {dataset.id}")
            print(f"   –≠–ª–µ–º–µ–Ω—Ç–æ–≤: {dataset.itemCount}")
            print(f"   –°–æ–∑–¥–∞–Ω: {dataset.createdAt}")
            
            if dataset.itemCount > 0:
                try:
                    items = dataset.list_items(limit=1)
                    if items.items:
                        sample = items.items[0]
                        print(f"   –ö–ª—é—á–∏: {list(sample.keys())}")
                except:
                    pass
            
            print()
        
        return [dataset.id for dataset in datasets.items if dataset.itemCount > 0]
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞—Ç–∞—Å–µ—Ç–æ–≤: {e}")
        return []

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîç –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –î–ê–ù–ù–´–• –ò–ó –°–£–©–ï–°–¢–í–£–Æ–©–ò–• –î–ê–¢–ê–°–ï–¢–û–í APIFY")
    print("=" * 60)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç–∞—Å–µ—Ç—ã
    dataset_ids = list_available_datasets()
    
    if not dataset_ids:
        print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç–∞—Å–µ—Ç–æ–≤")
        return
    
    # –í—ã–±–∏—Ä–∞–µ–º –¥–∞—Ç–∞—Å–µ—Ç
    try:
        choice = input(f"\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç–∞—Å–µ—Ç (1-{len(dataset_ids)}): ").strip()
        choice_idx = int(choice) - 1
        
        if 0 <= choice_idx < len(dataset_ids):
            dataset_id = dataset_ids[choice_idx]
            
            # –í—ã–±–∏—Ä–∞–µ–º –ª–∏–º–∏—Ç
            limit = input("–õ–∏–º–∏—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (Enter –¥–ª—è 100): ").strip()
            limit = int(limit) if limit else 100
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            extract_from_dataset(dataset_id, limit)
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
            
    except ValueError:
        print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()


