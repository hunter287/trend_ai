"""
–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤–∞—à–µ–≥–æ –∞–∫—Ç–æ—Ä–∞

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç:
1. –ü–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫—Ç–æ—Ä–µ
2. –°—Ö–µ–º—É –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
3. –ö–æ–¥ –∞–∫—Ç–æ—Ä–∞ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
4. –ò—Å—Ç–æ—Ä–∏—é –∑–∞–ø—É—Å–∫–æ–≤
5. –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
"""

import os
import json
from dotenv import load_dotenv
from apify_client import ApifyClient

load_dotenv()

def analyze_my_actor():
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤–∞—à–µ–≥–æ –∞–∫—Ç–æ—Ä–∞"""
    
    client = ApifyClient(os.getenv('APIFY_API_TOKEN'))
    print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Apify API —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    
    # ID –≤–∞—à–µ–≥–æ –∞–∫—Ç–æ—Ä–∞
    actor_id = "shu8hvrXbJbY3Eb9W"
    
    print(f"\nüîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –í–ê–®–ï–ì–û –ê–ö–¢–û–†–ê")
    print("="*60)
    print(f"üÜî ID –∞–∫—Ç–æ—Ä–∞: {actor_id}")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫—Ç–æ—Ä–µ
        actor_info = client.actor(actor_id).get()
        
        print(f"\nüìã –û–°–ù–û–í–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:")
        print("-" * 30)
        print(f"üé≠ –ù–∞–∑–≤–∞–Ω–∏–µ: {actor_info.get('name', 'N/A')}")
        print(f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {actor_info.get('description', 'N/A')}")
        print(f"üë§ –ê–≤—Ç–æ—Ä: {actor_info.get('username', 'N/A')}")
        print(f"üìÖ –°–æ–∑–¥–∞–Ω: {actor_info.get('createdAt', 'N/A')}")
        print(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω: {actor_info.get('modifiedAt', 'N/A')}")
        print(f"üè∑Ô∏è –¢–µ–≥–∏: {', '.join(actor_info.get('taggedTemplateIds', []))}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = actor_info.get('stats', {})
        print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print("-" * 20)
        print(f"üèÉ –í—Å–µ–≥–æ –∑–∞–ø—É—Å–∫–æ–≤: {stats.get('totalRuns', 0)}")
        print(f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {stats.get('rating', 'N/A')}")
        print(f"üí∞ –°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {stats.get('averageComputeUnits', 'N/A')} –µ–¥–∏–Ω–∏—Ü")
        
        # –°—Ö–µ–º–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        input_schema = actor_info.get('inputSchema', {})
        if input_schema:
            print(f"\nüìã –°–•–ï–ú–ê –í–•–û–î–ù–´–• –î–ê–ù–ù–´–•:")
            print("-" * 30)
            
            required_fields = input_schema.get('required', [])
            properties = input_schema.get('properties', {})
            
            print(f"üî¥ –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {required_fields}")
            print(f"\nüìù –í—Å–µ –ø–æ–ª—è:")
            
            for field_name, field_info in properties.items():
                required = "üî¥ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û" if field_name in required_fields else "üü¢ –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ"
                description = field_info.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')
                field_type = field_info.get('type', 'unknown')
                default_value = field_info.get('default', '–ù–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é')
                
                print(f"\n   üîπ {field_name} ({field_type})")
                print(f"      {description}")
                print(f"      {required}")
                if default_value != '–ù–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é':
                    print(f"      üí° –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: {default_value}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è enum
                if 'enum' in field_info:
                    print(f"      üìã –í–æ–∑–º–æ–∂–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: {field_info['enum']}")
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –∞–∫—Ç–æ—Ä–∞
        print(f"\nüíª –ö–û–î –ê–ö–¢–û–†–ê:")
        print("-" * 20)
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª—ã –∞–∫—Ç–æ—Ä–∞
            files = client.actor(actor_id).files().list()
            if files.items:
                print(f"üìÅ –§–∞–π–ª—ã –≤ –∞–∫—Ç–æ—Ä–µ:")
                for file in files.items:
                    print(f"   ‚Ä¢ {file.get('name', 'N/A')} ({file.get('size', 0)} –±–∞–π—Ç)")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
                    if file.get('name') in ['main.js', 'main.py', 'README.md', 'package.json']:
                        try:
                            file_content = client.actor(actor_id).file(file['name']).get()
                            print(f"   üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ {file['name']}:")
                            print(f"   {'-' * 40}")
                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤
                            content_preview = str(file_content)[:500]
                            print(f"   {content_preview}")
                            if len(str(file_content)) > 500:
                                print(f"   ... (–µ—â–µ {len(str(file_content)) - 500} —Å–∏–º–≤–æ–ª–æ–≤)")
                            print(f"   {'-' * 40}")
                        except Exception as e:
                            print(f"   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª: {e}")
            else:
                print("üìÅ –§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤: {e}")
        
        # –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—É—Å–∫–æ–≤
        print(f"\nüìà –ò–°–¢–û–†–ò–Ø –ó–ê–ü–£–°–ö–û–í:")
        print("-" * 25)
        try:
            runs = client.actor(actor_id).runs().list(limit=10)
            if runs.items:
                for i, run in enumerate(runs.items):
                    status_emoji = {
                        'SUCCEEDED': '‚úÖ',
                        'FAILED': '‚ùå', 
                        'ABORTED': '‚ö†Ô∏è',
                        'RUNNING': 'üèÉ',
                        'READY': '‚è≥'
                    }.get(run.get('status', ''), '‚ùì')
                    
                    print(f"   {i+1}. {status_emoji} {run.get('status', 'N/A')} - {run.get('startedAt', 'N/A')}")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—É—Å–∫–æ–≤
                    if run.get('status') == 'SUCCEEDED' and run.get('options', {}).get('input'):
                        input_data = run['options']['input']
                        print(f"      üìù –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
                        for key, value in list(input_data.items())[:3]:
                            if isinstance(value, str) and len(value) > 50:
                                value = value[:50] + "..."
                            print(f"         {key}: {value}")
            else:
                print("üì≠ –ù–µ—Ç –∑–∞–ø—É—Å–∫–æ–≤")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø—É—Å–∫–æ–≤: {e}")
        
        # –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        print(f"\nüí° –ü–†–ò–ú–ï–†–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø:")
        print("-" * 30)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ö–µ–º—ã
        if input_schema and properties:
            example_input = {}
            for field_name, field_info in properties.items():
                if field_name in required_fields:
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                    field_type = field_info.get('type', 'string')
                    if field_type == 'string':
                        if 'enum' in field_info:
                            example_input[field_name] = field_info['enum'][0]
                        else:
                            example_input[field_name] = f"example_{field_name}"
                    elif field_type == 'integer':
                        example_input[field_name] = 10
                    elif field_type == 'boolean':
                        example_input[field_name] = True
                    elif field_type == 'array':
                        example_input[field_name] = ["example1", "example2"]
                    else:
                        example_input[field_name] = f"example_{field_name}"
            
            print("üìù –ü—Ä–∏–º–µ—Ä –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:")
            print(json.dumps(example_input, indent=2, ensure_ascii=False))
            
            print(f"\nüöÄ –ü—Ä–∏–º–µ—Ä –∑–∞–ø—É—Å–∫–∞:")
            print(f"```python")
            print(f"client = ApifyClient('–≤–∞—à_—Ç–æ–∫–µ–Ω')")
            print(f"run = client.actor('{actor_id}').call(run_input={json.dumps(example_input, indent=2, ensure_ascii=False)})")
            print(f"```")
        
        return actor_info
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∞–∫—Ç–æ—Ä–∞: {e}")
        return None

if __name__ == "__main__":
    analyze_my_actor()
