#!/usr/bin/env python3
"""
–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ Instagram –∞–∫–∫–∞—É–Ω—Ç–æ–≤
"""

import os
import json
import threading
import time
from datetime import datetime
from flask import Flask, render_template, request, jsonify, session
from flask_socketio import SocketIO, emit
from dotenv import load_dotenv
from instagram_parser import InstagramParser

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
load_dotenv('mongodb_config.env')

app = Flask(__name__, static_folder='images', static_url_path='/images')
app.config['SECRET_KEY'] = os.urandom(24)
socketio = SocketIO(app, cors_allowed_origins="*")

def normalize_subcategory_name(subcategory, category):
    """
    –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –í –ö–û–ù–¢–ï–ö–°–¢–ï –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    –ù–∞–ø—Ä–∏–º–µ—Ä: 
    - Accessories + "Handbags" -> "Bags"
    - Clothing + "Tops" -> "Tops"  
    - Accessories + "Tops" -> "Tops" (–Ω–æ –≤ –¥—Ä—É–≥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏!)
    """
    subcategory_lower = subcategory.lower()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    normalization_rules = {
        'Accessories': {
            'Bags': ['bag', 'handbag', 'tote', 'clutch', 'crossbody', 'purse', 'wallet'],
            'Hats': ['hat', 'cap', 'beanie', 'fedora'],
            'Sunglasses': ['sunglass', 'eyewear'],
            'Belts': ['belt'],
            'Jewelry': ['jewelry', 'jewellery', 'necklace', 'bracelet', 'ring', 'earring'],
            'Watches': ['watch'],
            'Scarves': ['scarf', 'scarves'],
            'Gloves': ['glove', 'mitten'],
        },
        'Clothing': {
            'Dresses': ['dress'],
            'Pants': ['pant', 'trouser', 'jean'],
            'Skirts': ['skirt'],
            'Tops': ['top', 'blouse', 'shirt', 't-shirt', 'tank'],
            'Jackets': ['jacket', 'coat', 'blazer', 'cardigan'],
            'Shorts': ['short'],
        },
        'Footwear': {
            'Shoes': ['shoe'],
            'Sneakers': ['sneaker', 'trainer'],
            'Boots': ['boot'],
            'Heels': ['heel', 'stiletto', 'pump'],
            'Sandals': ['sandal', 'flip-flop'],
            'Flats': ['flat', 'loafer', 'ballet'],
        }
    }
    
    # –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if category in normalization_rules:
        for base_name, keywords in normalization_rules[category].items():
            for keyword in keywords:
                if keyword in subcategory_lower:
                    return base_name
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
    return subcategory

# –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è Jinja2
app.jinja_env.globals['normalize_subcategory'] = normalize_subcategory_name

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
active_parsing_sessions = {}

class WebParser:
    def __init__(self):
        self.apify_token = os.getenv("APIFY_API_TOKEN")
        self.mongodb_uri = os.getenv('MONGODB_URI', 'mongodb://trend_ai_user:LoGRomE2zJ0k0fuUhoTn@localhost:27017/instagram_gallery')
        self.parser = None
        
    def init_parser(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞"""
        if not self.apify_token:
            return False, "APIFY_API_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        try:
            self.parser = InstagramParser(self.apify_token, self.mongodb_uri)
            return True, "–ü–∞—Ä—Å–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
        except Exception as e:
            return False, f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–∞—Ä—Å–µ—Ä–∞: {e}"

web_parser = WebParser()

@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    return render_template('index.html')

@app.route('/api/status')
def api_status():
    """API —Å—Ç–∞—Ç—É—Å–∞"""
    success, message = web_parser.init_parser()
    return jsonify({
        'success': success,
        'message': message,
        'active_sessions': len(active_parsing_sessions)
    })

def log_print(message):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ –≤ stderr —Å flush"""
    import sys
    print(message, file=sys.stderr, flush=True)
    print(message, flush=True)

@app.route('/api/parse', methods=['POST'])
def api_parse():
    """API –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    try:
        log_print("\n" + "="*70)
        log_print("üî• [API] –ü–û–õ–£–ß–ï–ù POST –ó–ê–ü–†–û–° –ù–ê /api/parse")
        log_print("="*70)
        
        data = request.get_json()
        log_print(f"üì¶ [API] –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞: {data}")
        
        accounts = data.get('accounts', [])
        date_from = data.get('date_from')  # –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ (YYYY-MM-DD)
        session_id = data.get('session_id', f"session_{int(time.time())}")
        
        log_print(f"üìã [API] –ò–∑–≤–ª–µ—á—ë–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:")
        log_print(f"   accounts: {accounts}")
        log_print(f"   date_from: {date_from}")
        log_print(f"   session_id: {session_id}")
        
        if not accounts:
            return jsonify({'success': False, 'message': '–°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø—É—Å—Ç'})
        
        if not date_from:
            return jsonify({'success': False, 'message': '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞'})
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑—É–º–Ω—ã–π –ª–∏–º–∏—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–∏–æ–¥–∞ (–æ—Ç date_from –¥–æ —Å–µ–≥–æ–¥–Ω—è)
        try:
            from datetime import datetime as dt
            date_from_obj = dt.strptime(date_from, '%Y-%m-%d')
            today = dt.now()
            days_diff = (today - date_from_obj).days + 1
            # 10 –ø–æ—Å—Ç–æ–≤ –≤ –¥–µ–Ω—å (—Å –∑–∞–ø–∞—Å–æ–º –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–ª–æ–≥–µ—Ä–æ–≤)
            max_posts = min(2000, max(50, days_diff * 10))
            log_print(f"üìä [API] –ü–µ—Ä–∏–æ–¥: {days_diff} –¥–Ω–µ–π (—Å {date_from} –¥–æ —Å–µ–≥–æ–¥–Ω—è), —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏–º–∏—Ç: {max_posts} –ø–æ—Å—Ç–æ–≤")
        except Exception as e:
            max_posts = 200
            log_print(f"üìä [API] –û—à–∏–±–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ –ø–µ—Ä–∏–æ–¥–∞ ({e}), —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏–º–∏—Ç: {max_posts} –ø–æ—Å—Ç–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ø–∞—Ä—Å–µ—Ä–∞
        log_print(f"üîç [API] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–∞—Ä—Å–µ—Ä–∞...")
        success, message = web_parser.init_parser()
        if not success:
            log_print(f"‚ùå [API] –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {message}")
            return jsonify({'success': False, 'message': message})
        log_print(f"‚úÖ [API] –ü–∞—Ä—Å–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –°–Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é
        log_print(f"üîß [API] –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏ {session_id}")
        active_parsing_sessions[session_id] = {
            'status': 'starting',
            'accounts': accounts,
            'max_posts': max_posts,
            'date_from': date_from,
            'started_at': datetime.now().isoformat(),
            'progress': 0,
            'current_account': None,
            'results': []
        }
        log_print(f"‚úÖ [API] –°–µ—Å—Å–∏—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞")
        
        # –ó–∞—Ç–µ–º –∑–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        log_print(f"üßµ [API] –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Ç–æ–∫–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞...")
        log_print(f"   –ê—Ä–≥—É–º–µ–Ω—Ç—ã: session_id={session_id}, accounts={accounts}, max_posts={max_posts}, date_from={date_from}")
        
        thread = threading.Thread(
            target=run_parsing_session,
            args=(session_id, accounts, max_posts, date_from),
            name=f"parsing_thread_{session_id}"
        )
        thread.daemon = True
        
        log_print(f"üöÄ [API] –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞...")
        thread.start()
        log_print(f"‚úÖ [API] –ü–æ—Ç–æ–∫ –∑–∞–ø—É—â–µ–Ω, thread.is_alive() = {thread.is_alive()}")
        log_print(f"{'='*70}\n")
        
        return jsonify({
            'success': True,
            'message': '–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω',
            'session_id': session_id
        })
        
    except Exception as e:
        return jsonify({'success': False, 'message': f'–û—à–∏–±–∫–∞: {e}'})

@app.route('/api/session/<session_id>')
def api_session_status(session_id):
    """API —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Å—Å–∏–∏"""
    if session_id in active_parsing_sessions:
        return jsonify(active_parsing_sessions[session_id])
    else:
        return jsonify({'error': '–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'})

@app.route('/api/sessions')
def api_sessions():
    """API —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π"""
    return jsonify({
        'sessions': list(active_parsing_sessions.keys()),
        'count': len(active_parsing_sessions)
    })

@app.route('/gallery_<username>.html')
def serve_gallery(username):
    """–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ HTML –≥–∞–ª–µ—Ä–µ–π"""
    import os
    gallery_file = f"gallery_{username}.html"
    if os.path.exists(gallery_file):
        with open(gallery_file, 'r', encoding='utf-8') as f:
            return f.read()
    else:
        return f"–ì–∞–ª–µ—Ä–µ—è –¥–ª—è @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", 404

@app.route('/gallery')
def gallery():
    """–ì–∞–ª–µ—Ä–µ—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–∞—Ä—Å–µ—Ä–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ MongoDB
        parser = InstagramParser(
            apify_token=os.getenv("APIFY_API_TOKEN"),
            mongodb_uri=os.getenv('MONGODB_URI', 'mongodb://trend_ai_user:LoGRomE2zJ0k0fuUhoTn@localhost:27017/instagram_gallery')
        )
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ MongoDB
        if not parser.connect_mongodb():
            return "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö", 500
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è, –Ω–µ —Å–∫—Ä—ã—Ç—ã–µ –∏ –±–µ–∑ —Ç–µ–≥–æ–≤ Ximilar)
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π batch (50 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π), –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–¥–≥—Ä—É–∑—è—Ç—Å—è —á–µ—Ä–µ–∑ infinite scroll
        images = list(parser.collection.find(
            {
                "local_filename": {"$exists": True},
                "selected_for_tagging": {"$ne": True},
                "hidden": {"$ne": True},
                "$and": [
                    {"ximilar_tags": {"$exists": False}},
                    {"ximilar_objects_structured": {"$exists": False}}
                ]
            },
            {"_id": 1, "local_filename": 1, "username": 1, "likes_count": 1, "comments_count": 1, "caption": 1, "selected_for_tagging": 1}
        ).sort("parsed_at", -1).limit(50))
        
        return render_template('gallery.html', images=images, current_page='gallery')
    except Exception as e:
        return f"–û—à–∏–±–∫–∞: {e}", 500

@app.route('/gallery_to_tag')
def gallery_to_tag():
    """–ì–∞–ª–µ—Ä–µ—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–∞—Ä—Å–µ—Ä–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ MongoDB
        parser = InstagramParser(
            apify_token=os.getenv("APIFY_API_TOKEN"),
            mongodb_uri=os.getenv('MONGODB_URI', 'mongodb://trend_ai_user:LoGRomE2zJ0k0fuUhoTn@localhost:27017/instagram_gallery')
        )
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ MongoDB
        if not parser.connect_mongodb():
            return "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö", 500
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ –Ω–µ —Å–∫—Ä—ã—Ç—ã–µ –∏ –±–µ–∑ —Ç–µ–≥–æ–≤ Ximilar)
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π batch (50 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π), –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–¥–≥—Ä—É–∑—è—Ç—Å—è —á–µ—Ä–µ–∑ infinite scroll
        images = list(parser.collection.find(
            {
                "local_filename": {"$exists": True},
                "selected_for_tagging": True,
                "hidden": {"$ne": True},
                "$and": [
                    {"ximilar_tags": {"$exists": False}},
                    {"ximilar_objects_structured": {"$exists": False}}
                ]
            },
            {"_id": 1, "local_filename": 1, "username": 1, "likes_count": 1, "comments_count": 1, "caption": 1, "selected_for_tagging": 1, "selected_at": 1}
        ).sort("selected_at", -1).limit(50))
        
        return render_template('gallery.html', images=images, current_page='gallery_to_tag')
    except Exception as e:
        return f"–û—à–∏–±–∫–∞: {e}", 500

@app.route('/gallery_tagged')
def gallery_tagged():
    """–ì–∞–ª–µ—Ä–µ—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å —Ç–µ–≥–∞–º–∏ Ximilar"""
    try:
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–∞—Ä—Å–µ—Ä–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ MongoDB
        parser = InstagramParser(
            apify_token=os.getenv("APIFY_API_TOKEN"),
            mongodb_uri=os.getenv('MONGODB_URI', 'mongodb://trend_ai_user:LoGRomE2zJ0k0fuUhoTn@localhost:27017/instagram_gallery')
        )
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ MongoDB
        if not parser.connect_mongodb():
            return "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö", 500
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Ç–µ–≥–∞–º–∏ Ximilar (—Ç–æ–ª—å–∫–æ –Ω–µ —Å–∫—Ä—ã—Ç—ã–µ, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ–±—ä–µ–∫—Ç–Ω–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ)
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π batch (50 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π), –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–¥–≥—Ä—É–∑—è—Ç—Å—è —á–µ—Ä–µ–∑ infinite scroll
        images = list(parser.collection.find(
            {
                "local_filename": {"$exists": True},
                "hidden": {"$ne": True},
                "$or": [
                    {"ximilar_objects_structured": {"$exists": True, "$ne": []}},
                    {"ximilar_tags": {"$exists": True, "$ne": []}}
                ]
            },
            {
                "_id": 1, "local_filename": 1, "username": 1, "likes_count": 1,
                "comments_count": 1, "caption": 1, "ximilar_tags": 1,
                "ximilar_objects_structured": 1, "tagged_at": 1, "ximilar_tagged_at": 1,
                "timestamp": 1
            }
        ).sort("ximilar_tagged_at", -1).limit(50))

        print(f"üñºÔ∏è  –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –≥–∞–ª–µ—Ä–µ—é (–ø–µ—Ä–≤—ã–π batch, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–¥–≥—Ä—É–∑—è—Ç—Å—è —á–µ—Ä–µ–∑ infinite scroll)")
        
        return render_template('gallery.html', images=images, current_page='gallery_tagged')
    except Exception as e:
        return f"–û—à–∏–±–∫–∞: {e}", 500

@app.route('/all_accounts_gallery.html')
@app.route('/all_accounts_gallery_page_<int:page>.html')
def serve_combined_gallery(page=1):
    """–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –æ–±—â–µ–π –≥–∞–ª–µ—Ä–µ–∏ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    import os
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞
    if page == 1:
        gallery_file = "all_accounts_gallery.html"
    else:
        gallery_file = f"all_accounts_gallery_page_{page}.html"
    
    if os.path.exists(gallery_file):
        with open(gallery_file, 'r', encoding='utf-8') as f:
            return f.read()
    else:
        return f"–û–±—â–∞—è –≥–∞–ª–µ—Ä–µ—è (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}) –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", 404

# –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã —Ç–µ–ø–µ—Ä—å –æ–±—Å–ª—É–∂–∏–≤–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ Flask
# —á–µ—Ä–µ–∑ –Ω–∞—Å—Ç—Ä–æ–π–∫—É static_folder='images', static_url_path='/images'

@app.route('/api/mark-for-tagging', methods=['POST'])
def api_mark_for_tagging():
    """API –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Ç–µ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        data = request.get_json()
        image_ids = data.get('image_ids', [])
        
        if not image_ids:
            return jsonify({'success': False, 'message': '–°–ø–∏—Å–æ–∫ ID –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø—É—Å—Ç'})
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ø–∞—Ä—Å–µ—Ä–∞
        success, message = web_parser.init_parser()
        if not success:
            return jsonify({'success': False, 'message': message})
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ MongoDB
        if not web_parser.parser.connect_mongodb():
            return jsonify({'success': False, 'message': '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB'})
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        from bson import ObjectId
        from datetime import datetime
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–µ ID –≤ ObjectId
        object_ids = []
        for img_id in image_ids:
            try:
                object_ids.append(ObjectId(img_id))
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è ID {img_id}: {e}")
                continue
        
        if not object_ids:
            return jsonify({'success': False, 'message': '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ ID –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π'})
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ MongoDB
        result = web_parser.parser.collection.update_many(
            {"_id": {"$in": object_ids}},
            {
                "$set": {
                    "selected_for_tagging": True,
                    "selected_at": datetime.now().isoformat()
                }
            }
        )
        
        return jsonify({
            'success': True,
            'message': f'–û—Ç–º–µ—á–µ–Ω–æ {result.modified_count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Ç–µ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è',
            'marked_count': result.modified_count
        })
        
    except Exception as e:
        return jsonify({'success': False, 'message': f'–û—à–∏–±–∫–∞: {e}'})

def run_parsing_session(session_id, accounts, max_posts, date_from=None):
    """–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    import sys
    import traceback as tb
    
    log_print(f"\n{'='*70}")
    log_print(f"üöÄ [THREAD] –ù–ê–ß–ê–õ–û –ü–û–¢–û–ö–ê –ü–ê–†–°–ò–ù–ì–ê")
    log_print(f"{'='*70}")
    log_print(f"   session_id: {session_id}")
    log_print(f"   accounts: {accounts}")
    log_print(f"   max_posts: {max_posts}")
    log_print(f"   date_from: {date_from} (–¥–æ —Å–µ–≥–æ–¥–Ω—è)")
    log_print(f"   thread_name: {threading.current_thread().name}")
    log_print(f"{'='*70}\n")
    
    session_data = None
    try:
        log_print(f"üöÄ [THREAD] –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤ –ø–æ—Ç–æ–∫–µ –¥–ª—è session_id={session_id}")
        log_print(f"üìã [THREAD] –ê–∫–∫–∞—É–Ω—Ç—ã: {accounts}")
        log_print(f"üìÖ [THREAD] –î–∞—Ç–∞: —Å {date_from} –¥–æ —Å–µ–≥–æ–¥–Ω—è")
        log_print(f"üìä [THREAD] max_posts: {max_posts}")
        
        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–∏
        time.sleep(0.1)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Å—Å–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if session_id not in active_parsing_sessions:
            log_print(f"‚ö†Ô∏è [THREAD] –°–µ—Å—Å–∏—è {session_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏—è—Ö")
            log_print(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Å—Å–∏–∏: {list(active_parsing_sessions.keys())}")
            return
        
        log_print(f"‚úÖ [THREAD] –°–µ—Å—Å–∏—è –Ω–∞–π–¥–µ–Ω–∞")
        session_data = active_parsing_sessions[session_id]
        session_data['status'] = 'running'
        
        log_print(f"üîó [THREAD] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB...")
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ MongoDB
        if not web_parser.parser.connect_mongodb():
            log_print(f"‚ùå [THREAD] –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB")
            session_data['status'] = 'error'
            session_data['error'] = '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB'
            socketio.emit('parsing_update', session_data, room=session_id)
            return
        
        log_print(f"‚úÖ [THREAD] MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
        total_accounts = len(accounts)
        results = []
        
        for i, account in enumerate(accounts):
            try:
                log_print(f"üîç [THREAD] –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ {i+1}/{total_accounts}: @{account}")
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                session_data['current_account'] = account
                session_data['progress'] = int((i / total_accounts) * 100)
                socketio.emit('parsing_update', session_data, room=session_id)
                
                # –ü–∞—Ä—Å–∏–º –∞–∫–∫–∞—É–Ω—Ç
                date_info = ""
                if date_from:
                    date_info = f" (—Å {date_from} –¥–æ —Å–µ–≥–æ–¥–Ω—è)"
                
                log_print(f"üì® [THREAD] –û—Ç–ø—Ä–∞–≤–∫–∞ WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ @{account}")
                socketio.emit('parsing_log', {
                    'message': f'üîç –ü–∞—Ä—Å–∏–Ω–≥ –∞–∫–∫–∞—É–Ω—Ç–∞: @{account}{date_info}',
                    'timestamp': datetime.now().isoformat()
                }, room=session_id)
                
                log_print(f"üöÄ [THREAD] –ó–∞–ø—É—Å–∫ parse_instagram_account –¥–ª—è @{account}")
                parsed_data = web_parser.parser.parse_instagram_account(account, max_posts, date_from)
                log_print(f"‚úÖ [THREAD] parse_instagram_account –∑–∞–≤–µ—Ä—à—ë–Ω –¥–ª—è @{account}: {parsed_data is not None}")
                if not parsed_data:
                    socketio.emit('parsing_log', {
                        'message': f'‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ @{account}',
                        'timestamp': datetime.now().isoformat()
                    }, room=session_id)
                    continue
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                image_data = web_parser.parser.extract_image_urls(parsed_data["posts"])
                if not image_data:
                    socketio.emit('parsing_log', {
                        'message': f'‚ùå –ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ @{account}',
                        'timestamp': datetime.now().isoformat()
                    }, room=session_id)
                    continue
                
                # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                socketio.emit('parsing_log', {
                    'message': f'‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ @{account}...',
                    'timestamp': datetime.now().isoformat()
                }, room=session_id)
                
                downloaded_data = web_parser.parser.download_images(image_data, 999999)  # –ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ MongoDB
                socketio.emit('parsing_log', {
                    'message': f'üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ MongoDB...',
                    'timestamp': datetime.now().isoformat()
                }, room=session_id)
                
                saved_count = web_parser.parser.save_to_mongodb(downloaded_data, account)
                
                # –°–æ–∑–¥–∞–µ–º HTML –≥–∞–ª–µ—Ä–µ—é
                socketio.emit('parsing_log', {
                    'message': f'üåê –°–æ–∑–¥–∞–Ω–∏–µ HTML –≥–∞–ª–µ—Ä–µ–∏...',
                    'timestamp': datetime.now().isoformat()
                }, room=session_id)
                
                web_parser.parser.create_gallery_html(downloaded_data, account)
                
                result = {
                    'account': account,
                    'success': True,
                    'images_downloaded': len(downloaded_data),
                    'images_saved': saved_count or 0,
                    'images_skipped': len(downloaded_data) - (saved_count or 0),
                    'gallery_url': f'/gallery_{account}.html'
                }
                
                socketio.emit('parsing_log', {
                    'message': f'‚úÖ @{account} –∑–∞–≤–µ—Ä—à–µ–Ω: {len(downloaded_data)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved_count or 0}, –ø—Ä–æ–ø—É—â–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ {len(downloaded_data) - (saved_count or 0)}',
                    'timestamp': datetime.now().isoformat()
                }, room=session_id)
                
            except Exception as e:
                result = {
                    'account': account,
                    'success': False,
                    'error': str(e)
                }
                
                socketio.emit('parsing_log', {
                    'message': f'‚ùå –û—à–∏–±–∫–∞ @{account}: {e}',
                    'timestamp': datetime.now().isoformat()
                }, room=session_id)
            
            results.append(result)
            session_data['results'] = results
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—â—É—é –≥–∞–ª–µ—Ä–µ—é –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        socketio.emit('parsing_log', {
            'message': f'üåê –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—â–µ–π –≥–∞–ª–µ—Ä–µ–∏ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤...',
            'timestamp': datetime.now().isoformat()
        }, room=session_id)
        
        try:
            combined_gallery_html = web_parser.parser.create_combined_gallery_html(page=1, per_page=200)
            if combined_gallery_html:
                socketio.emit('parsing_log', {
                    'message': f'‚úÖ –û–±—â–∞—è –≥–∞–ª–µ—Ä–µ—è —Å–æ–∑–¥–∞–Ω–∞: /all_accounts_gallery.html',
                    'timestamp': datetime.now().isoformat()
                }, room=session_id)
            else:
                socketio.emit('parsing_log', {
                    'message': f'‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ–±—â—É—é –≥–∞–ª–µ—Ä–µ—é',
                    'timestamp': datetime.now().isoformat()
                }, room=session_id)
        except Exception as e:
            socketio.emit('parsing_log', {
                'message': f'‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—â–µ–π –≥–∞–ª–µ—Ä–µ–∏: {e}',
                'timestamp': datetime.now().isoformat()
            }, room=session_id)
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é
        session_data['status'] = 'completed'
        session_data['progress'] = 100
        session_data['completed_at'] = datetime.now().isoformat()
        socketio.emit('parsing_complete', session_data, room=session_id)
        
        # –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç
        threading.Timer(300, lambda: active_parsing_sessions.pop(session_id, None)).start()
        
    except Exception as e:
        log_print(f"\n{'='*70}")
        log_print(f"‚ùå [THREAD] –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –í –ü–û–¢–û–ö–ï –ü–ê–†–°–ò–ù–ì–ê")
        log_print(f"{'='*70}")
        log_print(f"   session_id: {session_id}")
        log_print(f"   –û—à–∏–±–∫–∞: {e}")
        log_print(f"   –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
        log_print(f"{'='*70}")
        
        import traceback
        log_print("üìã [THREAD] –ü–æ–ª–Ω—ã–π traceback:")
        import sys
        traceback.print_exc(file=sys.stderr)
        log_print(f"{'='*70}\n")
        
        if session_data is not None:
            session_data['status'] = 'error'
            session_data['error'] = str(e)
            socketio.emit('parsing_error', session_data, room=session_id)
        else:
            # –ï—Å–ª–∏ —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–∞–ø–∏—Å—å –æ–± –æ—à–∏–±–∫–µ
            error_data = {
                'session_id': session_id,
                'status': 'error',
                'error': f'–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {str(e)}',
                'timestamp': datetime.now().isoformat()
            }
            socketio.emit('parsing_error', error_data, room=session_id)

@socketio.on('connect')
def handle_connect():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WebSocket"""
    print(f'–ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: {request.sid}')

@socketio.on('disconnect')
def handle_disconnect():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è WebSocket"""
    print(f'–ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω: {request.sid}')

@socketio.on('join_session')
def handle_join_session(data):
    """–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ —Å–µ—Å—Å–∏–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    from flask_socketio import join_room
    session_id = data.get('session_id')
    if session_id:
        join_room(session_id)
        print(f'–ö–ª–∏–µ–Ω—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —Å–µ—Å—Å–∏–∏: {session_id}')

@app.route('/api/unmark-for-tagging', methods=['POST'])
def api_unmark_for_tagging():
    """API –¥–ª—è —Å–Ω—è—Ç–∏—è –æ—Ç–º–µ—Ç–∫–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Ç–µ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        data = request.get_json()
        image_ids = data.get('image_ids', [])
        
        if not image_ids:
            return jsonify({'success': False, 'message': '–°–ø–∏—Å–æ–∫ ID –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø—É—Å—Ç'})
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ø–∞—Ä—Å–µ—Ä–∞
        success, message = web_parser.init_parser()
        if not success:
            return jsonify({'success': False, 'message': message})
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ MongoDB
        if not web_parser.parser.connect_mongodb():
            return jsonify({'success': False, 'message': '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB'})
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        from bson import ObjectId
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–µ ID –≤ ObjectId
        object_ids = []
        for img_id in image_ids:
            try:
                object_ids.append(ObjectId(img_id))
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è ID {img_id}: {e}")
                continue
        
        if not object_ids:
            return jsonify({'success': False, 'message': '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ ID –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π'})
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        result = web_parser.parser.collection.update_many(
            {"_id": {"$in": object_ids}},
            {
                "$set": {
                    "selected_for_tagging": False,
                    "selected_at": None
                }
            }
        )
        
        return jsonify({
            'success': True,
            'message': f'–°–Ω—è—Ç–∞ –æ—Ç–º–µ—Ç–∫–∞ —Å {result.modified_count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π',
            'unmarked_count': result.modified_count
        })
        
    except Exception as e:
        return jsonify({'success': False, 'message': f'–û—à–∏–±–∫–∞: {e}'})

@app.route('/api/hide-images', methods=['POST'])
def api_hide_images():
    """API –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    try:
        data = request.get_json()
        image_ids = data.get('image_ids', [])
        
        if not image_ids:
            return jsonify({'success': False, 'message': '–°–ø–∏—Å–æ–∫ ID –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø—É—Å—Ç'})
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ø–∞—Ä—Å–µ—Ä–∞
        success, message = web_parser.init_parser()
        if not success:
            return jsonify({'success': False, 'message': message})
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ MongoDB
        if not web_parser.parser.connect_mongodb():
            return jsonify({'success': False, 'message': '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB'})
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        from bson import ObjectId
        from datetime import datetime
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–µ ID –≤ ObjectId
        object_ids = []
        for img_id in image_ids:
            try:
                object_ids.append(ObjectId(img_id))
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è ID {img_id}: {e}")
                continue
        
        if not object_ids:
            return jsonify({'success': False, 'message': '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ ID –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π'})
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ MongoDB - –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ —Å–∫—Ä—ã—Ç—ã–µ
        result = web_parser.parser.collection.update_many(
            {"_id": {"$in": object_ids}},
            {
                "$set": {
                    "hidden": True,
                    "hidden_at": datetime.now().isoformat()
                }
            }
        )
        
        return jsonify({
            'success': True,
            'message': f'–°–∫—Ä—ã—Ç–æ {result.modified_count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π',
            'hidden_count': result.modified_count
        })
        
    except Exception as e:
        return jsonify({'success': False, 'message': f'–û—à–∏–±–∫–∞: {e}'})

@app.route('/api/filter-options', methods=['GET'])
def api_filter_options():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ø—Ü–∏–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ø–∞—Ä—Å–µ—Ä–∞
        success, message = web_parser.init_parser()
        if not success:
            return jsonify({'success': False, 'message': message})
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ MongoDB
        if not web_parser.parser.connect_mongodb():
            return jsonify({'success': False, 'message': '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB'})
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Ç–µ–≥–∞–º–∏ Ximilar (–∏—Å–∫–ª—é—á–∞–µ–º —Å–∫—Ä—ã—Ç—ã–µ)
        images = list(web_parser.parser.collection.find(
            {
                "local_filename": {"$exists": True},
                "hidden": {"$ne": True},
                "$or": [
                    {"ximilar_objects_structured": {"$exists": True, "$ne": []}},
                    {"ximilar_tags": {"$exists": True, "$ne": []}}
                ]
            },
            {"ximilar_objects_structured": 1}
        ))
        
        # –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Å –ø–æ–¥—Å—á–µ—Ç–æ–º (–ø–æ –æ–¥–Ω–æ–º—É —Ä–∞–∑—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏, —á—Ç–æ –∏ –≤ —à–∞–±–ª–æ–Ω–µ
        hierarchical_filters = {}
        
        # –°—Ç—Ä—É–∫—Ç—É—Ä–∞: {category: {subcategory: {colors: {}, materials: {}, styles: {}}}}
        
        processed_images = 0
        for image in images:
            if image.get('ximilar_objects_structured'):
                processed_images += 1
                # –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–µ–≥–∏ –¥–ª—è —ç—Ç–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                image_categories = set()
                image_objects = set()
                image_colors = set()
                image_materials = set()
                image_styles = set()
                
                # –°–Ω–∞—á–∞–ª–∞ –¥–µ–¥—É–ø–ª–∏—Ü–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç—ã –ø–æ –∏—Ö –æ—Å–Ω–æ–≤–Ω–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é
                # –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–¥—Å—á–µ—Ç–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ —Å —Ä–∞–∑–Ω—ã–º–∏ –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏
                unique_objects_by_name = {}
                
                for obj in image['ximilar_objects_structured']:
                    # –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ (—Ç–æ—á–Ω–æ –∫–∞–∫ –≤ —à–∞–±–ª–æ–Ω–µ)
                    obj_name = ''
                    if obj.get('properties'):
                        if obj['properties'].get('other_attributes'):
                            if obj['properties']['other_attributes'].get('Subcategory'):
                                obj_name = obj['properties']['other_attributes']['Subcategory'][0]['name']
                            elif obj['properties']['other_attributes'].get('Category'):
                                obj_name = obj['properties']['other_attributes']['Category'][0]['name']
                    
                    # –ï—Å–ª–∏ –æ–±—ä–µ–∫—Ç —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ –µ—Å—Ç—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                    if obj_name and obj_name in unique_objects_by_name:
                        continue
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–≤—ã–π –æ–±—ä–µ–∫—Ç —Å —ç—Ç–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
                    if obj_name:
                        unique_objects_by_name[obj_name] = obj
                
                # –°–Ω–∞—á–∞–ª–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫ –∫–∞–∫–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º/–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –æ—Ç–Ω–æ—Å–∏—Ç—Å—è —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                image_subcategories = {}  # {category: [subcategories]}
                
                for obj in unique_objects_by_name.values():
                    category = obj.get('top_category', 'Other')
                    
                    subcategory = ''
                    if obj.get('properties'):
                        if obj['properties'].get('other_attributes'):
                            if obj['properties']['other_attributes'].get('Subcategory'):
                                subcategory = obj['properties']['other_attributes']['Subcategory'][0]['name']
                            elif obj['properties']['other_attributes'].get('Category'):
                                subcategory = obj['properties']['other_attributes']['Category'][0]['name']
                    
                    if subcategory:
                        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                        # –ù–∞–ø—Ä–∏–º–µ—Ä: Accessories+Handbags -> Bags, –Ω–æ Clothing+Tops –æ—Å—Ç–∞—ë—Ç—Å—è Tops
                        normalized_subcategory = normalize_subcategory_name(subcategory, category)
                        
                        if category not in image_subcategories:
                            image_subcategories[category] = set()
                        image_subcategories[category].add(normalized_subcategory)
                
                # –¢–µ–ø–µ—Ä—å —Å–æ–±–∏—Ä–∞–µ–º –í–°–ï –∞—Ç—Ä–∏–±—É—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (—Å–æ –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–æ–≤)
                all_colors = set()
                all_materials = set()
                all_styles = set()
                
                for obj in unique_objects_by_name.values():
                    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ü–≤–µ—Ç–∞
                    if obj.get('properties', {}).get('visual_attributes', {}).get('Color'):
                        for color in obj['properties']['visual_attributes']['Color']:
                            all_colors.add(color['name'])
                    
                    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
                    if obj.get('properties', {}).get('material_attributes', {}).get('Material'):
                        for material in obj['properties']['material_attributes']['Material']:
                            all_materials.add(material['name'])
                    
                    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å—Ç–∏–ª–∏
                    if obj.get('properties', {}).get('style_attributes', {}).get('Style'):
                        for style in obj['properties']['style_attributes']['Style']:
                            all_styles.add(style['name'])
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã –∫–æ –í–°–ï–ú –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –Ω–∞ —ç—Ç–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
                for category, subcategories in image_subcategories.items():
                    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                    if category not in hierarchical_filters:
                        hierarchical_filters[category] = {}
                    
                    for subcategory in subcategories:
                        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                        if subcategory not in hierarchical_filters[category]:
                            hierarchical_filters[category][subcategory] = {
                                'colors': {},
                                'materials': {},
                                'styles': {}
                            }
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –í–°–ï —Ü–≤–µ—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫ —ç—Ç–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                        for color_name in all_colors:
                            if color_name not in hierarchical_filters[category][subcategory]['colors']:
                                hierarchical_filters[category][subcategory]['colors'][color_name] = set()
                            hierarchical_filters[category][subcategory]['colors'][color_name].add(image['_id'])
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –í–°–ï –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫ —ç—Ç–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                        for material_name in all_materials:
                            if material_name not in hierarchical_filters[category][subcategory]['materials']:
                                hierarchical_filters[category][subcategory]['materials'][material_name] = set()
                            hierarchical_filters[category][subcategory]['materials'][material_name].add(image['_id'])
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –í–°–ï —Å—Ç–∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫ —ç—Ç–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                        for style_name in all_styles:
                            if style_name not in hierarchical_filters[category][subcategory]['styles']:
                                hierarchical_filters[category][subcategory]['styles'][style_name] = set()
                            hierarchical_filters[category][subcategory]['styles'][style_name].add(image['_id'])
                
                # –ü–æ–¥—Å—á–µ—Ç —É–∂–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –≤—ã—à–µ
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º sets –≤ counts –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞
        # –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ —Å—á—ë—Ç—á–∏–∫–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
        hierarchical_filters_with_counts = {}
        for category, subcategories in hierarchical_filters.items():
            hierarchical_filters_with_counts[category] = {
                '_meta': {'image_count': 0, 'subcategories': {}}
            }
            
            # –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ image_ids –¥–ª—è –≤—Å–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            category_image_ids = set()
            
            for subcategory, filters in subcategories.items():
                # –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ image_ids –¥–ª—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                subcategory_image_ids = set()
                for image_ids_set in filters['colors'].values():
                    subcategory_image_ids.update(image_ids_set)
                for image_ids_set in filters['materials'].values():
                    subcategory_image_ids.update(image_ids_set)
                for image_ids_set in filters['styles'].values():
                    subcategory_image_ids.update(image_ids_set)
                
                category_image_ids.update(subcategory_image_ids)
                
                hierarchical_filters_with_counts[category][subcategory] = {
                    'colors': {color: len(image_ids) for color, image_ids in filters['colors'].items()},
                    'materials': {material: len(image_ids) for material, image_ids in filters['materials'].items()},
                    'styles': {style: len(image_ids) for style, image_ids in filters['styles'].items()},
                    '_image_count': len(subcategory_image_ids)
                }
                
                hierarchical_filters_with_counts[category]['_meta']['subcategories'][subcategory] = len(subcategory_image_ids)
            
            hierarchical_filters_with_counts[category]['_meta']['image_count'] = len(category_image_ids)
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        print(f"üîç DEBUG: –ù–∞–π–¥–µ–Ω–æ {len(images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å —Ç–µ–≥–∞–º–∏ (–í–°–ï –≤ –±–∞–∑–µ)")
        print(f"üîç DEBUG: –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed_images} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å ximilar_objects_structured")
        print(f"üìä –ò–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã: {len(hierarchical_filters)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        for category, subcategories in hierarchical_filters_with_counts.items():
            # –ò—Å–∫–ª—é—á–∞–µ–º _meta –∏–∑ –ø–æ–¥—Å—á—ë—Ç–∞
            real_subcategories = {k: v for k, v in subcategories.items() if k != '_meta'}
            total_subcategories = len(real_subcategories)
            total_colors = sum(len(filters['colors']) for filters in real_subcategories.values())
            total_materials = sum(len(filters['materials']) for filters in real_subcategories.values())
            total_styles = sum(len(filters['styles']) for filters in real_subcategories.values())
            image_count = subcategories.get('_meta', {}).get('image_count', 0)
            print(f"  üìÇ {category}: {image_count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, {total_subcategories} –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π, {total_colors} —Ü–≤–µ—Ç–æ–≤, {total_materials} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤, {total_styles} —Å—Ç–∏–ª–µ–π")
        
        return jsonify({
            'success': True,
            'hierarchical_filters': hierarchical_filters_with_counts
        })
        
    except Exception as e:
        return jsonify({'success': False, 'message': f'–û—à–∏–±–∫–∞: {e}'})

@app.route('/api/debug-filter/<tag_name>')
def api_debug_filter(tag_name):
    """API –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–µ–≥–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ø–∞—Ä—Å–µ—Ä–∞
        success, message = web_parser.init_parser()
        if not success:
            return jsonify({'success': False, 'message': message})
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ MongoDB
        if not web_parser.parser.connect_mongodb():
            return jsonify({'success': False, 'message': '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB'})
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Ç–µ–≥–∞–º–∏ Ximilar (–∏—Å–∫–ª—é—á–∞–µ–º —Å–∫—Ä—ã—Ç—ã–µ)
        images = list(web_parser.parser.collection.find(
            {
                "local_filename": {"$exists": True},
                "hidden": {"$ne": True},
                "$or": [
                    {"ximilar_objects_structured": {"$exists": True, "$ne": []}},
                    {"ximilar_tags": {"$exists": True, "$ne": []}}
                ]
            },
            {"_id": 1, "local_filename": 1, "ximilar_objects_structured": 1}
        ))
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏, —á—Ç–æ –∏ –≤ API
        matching_images = []
        for image in images:
            if image.get('ximilar_objects_structured'):
                # –î–µ–¥—É–ø–ª–∏—Ü–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç—ã –ø–æ –∏—Ö –æ—Å–Ω–æ–≤–Ω–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é
                unique_objects_by_name = {}
                for obj in image['ximilar_objects_structured']:
                    obj_name = ''
                    if obj.get('properties'):
                        if obj['properties'].get('other_attributes'):
                            if obj['properties']['other_attributes'].get('Subcategory'):
                                obj_name = obj['properties']['other_attributes']['Subcategory'][0]['name']
                            elif obj['properties']['other_attributes'].get('Category'):
                                obj_name = obj['properties']['other_attributes']['Category'][0]['name']
                    
                    if obj_name and obj_name not in unique_objects_by_name:
                        unique_objects_by_name[obj_name] = obj
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏—Å–∫–æ–º—ã–π —Ç–µ–≥ —Å—Ä–µ–¥–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
                for obj in unique_objects_by_name.values():
                    if obj.get('properties'):
                        if obj['properties'].get('other_attributes'):
                            if obj['properties']['other_attributes'].get('Subcategory'):
                                sub_name = obj['properties']['other_attributes']['Subcategory'][0]['name']
                                if sub_name == tag_name:
                                    matching_images.append({
                                        'id': str(image['_id']),
                                        'filename': image['local_filename']
                                    })
                                    break
                            elif obj['properties']['other_attributes'].get('Category'):
                                cat_name = obj['properties']['other_attributes']['Category'][0]['name']
                                if cat_name == tag_name:
                                    matching_images.append({
                                        'id': str(image['_id']),
                                        'filename': image['local_filename']
                                    })
                                    break
        
        return jsonify({
            'success': True,
            'tag_name': tag_name,
            'total_images': len(images),
            'matching_images_count': len(matching_images),
            'matching_images': matching_images[:10]  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
        })
        
    except Exception as e:
        return jsonify({'success': False, 'message': f'–û—à–∏–±–∫–∞: {e}'})

@app.route('/api/tag-images', methods=['POST'])
def api_tag_images():
    """API –¥–ª—è —Ç–µ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ Ximilar"""
    try:
        data = request.get_json()
        image_ids = data.get('image_ids', [])

        if not image_ids:
            return jsonify({'success': False, 'message': '–°–ø–∏—Å–æ–∫ ID –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø—É—Å—Ç'})

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ø–∞—Ä—Å–µ—Ä–∞
        success, message = web_parser.init_parser()
        if not success:
            return jsonify({'success': False, 'message': message})

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ MongoDB
        if not web_parser.parser.connect_mongodb():
            return jsonify({'success': False, 'message': '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB'})

        from bson import ObjectId

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–µ ID –≤ ObjectId
        object_ids = []
        for img_id in image_ids:
            try:
                object_ids.append(ObjectId(img_id))
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è ID {img_id}: {e}")
                continue

        if not object_ids:
            return jsonify({'success': False, 'message': '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ ID –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π'})

        # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        images = list(web_parser.parser.collection.find(
            {"_id": {"$in": object_ids}},
            {"_id": 1, "local_filename": 1, "local_path": 1}
        ))

        if not images:
            return jsonify({'success': False, 'message': '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö'})

        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä Ximilar —Ç–µ–≥–≥–µ—Ä–∞
        from ximilar_fashion_tagger import XimilarFashionTagger
        ximilar_api_key = os.getenv("XIMILAR_API_KEY")

        if not ximilar_api_key:
            return jsonify({'success': False, 'message': 'XIMILAR_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è'})

        tagger = XimilarFashionTagger(ximilar_api_key, web_parser.parser.mongodb_uri)

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ MongoDB
        if not tagger.connect_mongodb():
            return jsonify({'success': False, 'message': '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB –¥–ª—è —Ç–µ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è'})

        # –¢–µ–≥–≥–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Ximilar
        tagged_count = 0
        for image in images:
            try:
                # –§–æ—Ä–º–∏—Ä—É–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                image_url = f"http://158.160.19.119:5000/images/{image['local_filename']}"

                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ç–µ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
                tags_result = tagger.tag_image_with_ximilar(image_url)

                if tags_result and 'success' in tags_result and tags_result['success']:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å –æ–±—ä–µ–∫—Ç–Ω–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
                    update_data = {
                        "ximilar_objects_structured": tags_result.get("objects", []),
                        "ximilar_properties_summary": tags_result.get("properties_summary", {}),
                        "ximilar_tags": tags_result.get("tags", []),
                        "ximilar_objects": tags_result.get("objects", []),
                        "ximilar_total_tags": tags_result.get("total_tags", 0),
                        "ximilar_total_objects": tags_result.get("total_objects", 0),
                        "ximilar_tagged_at": datetime.now().isoformat(),
                        "ximilar_success": tags_result.get("success", False),
                        "tagged_at": datetime.now().isoformat(),
                        "selected_for_tagging": False  # –£–±–∏—Ä–∞–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–ª—è —Ç–µ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
                    }

                    if not tags_result.get("success"):
                        update_data["ximilar_error"] = tags_result.get("error", "Unknown error")

                    web_parser.parser.collection.update_one(
                        {"_id": image['_id']},
                        {"$set": update_data}
                    )
                    tagged_count += 1
                    print(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {image['local_filename']} –æ—Ç—Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–æ")
                else:
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ç–µ–≥–∏—Ä–æ–≤–∞—Ç—å {image['local_filename']}")

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è {image['local_filename']}: {e}")
                continue

        return jsonify({
            'success': True,
            'message': f'–û—Ç—Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–æ {tagged_count} –∏–∑ {len(images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π',
            'tagged_count': tagged_count
        })

    except Exception as e:
        return jsonify({'success': False, 'message': f'–û—à–∏–±–∫–∞: {e}'})

@app.route('/api/load-more-images', methods=['GET'])
def api_load_more_images():
    """API –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (infinite scroll)"""
    try:
        gallery_type = request.args.get('gallery_type', 'gallery')
        offset = int(request.args.get('offset', 0))
        limit = int(request.args.get('limit', 50))

        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–∞—Ä—Å–µ—Ä–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ MongoDB
        parser = InstagramParser(
            apify_token=os.getenv("APIFY_API_TOKEN"),
            mongodb_uri=os.getenv('MONGODB_URI', 'mongodb://trend_ai_user:LoGRomE2zJ0k0fuUhoTn@localhost:27017/instagram_gallery')
        )

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ MongoDB
        if not parser.connect_mongodb():
            return jsonify({'success': False, 'message': '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö'})

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –≥–∞–ª–µ—Ä–µ–∏
        if gallery_type == 'gallery':
            # –û–±—ã—á–Ω–∞—è –≥–∞–ª–µ—Ä–µ—è (–Ω–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è, –Ω–µ —Å–∫—Ä—ã—Ç—ã–µ, –±–µ–∑ —Ç–µ–≥–æ–≤ Ximilar)
            query = {
                "local_filename": {"$exists": True},
                "selected_for_tagging": {"$ne": True},
                "hidden": {"$ne": True},
                "$and": [
                    {"ximilar_tags": {"$exists": False}},
                    {"ximilar_objects_structured": {"$exists": False}}
                ]
            }
            projection = {"_id": 1, "local_filename": 1, "username": 1, "likes_count": 1, "comments_count": 1, "caption": 1, "selected_for_tagging": 1}
            sort_field = "parsed_at"

        elif gallery_type == 'gallery_to_tag':
            # –ì–∞–ª–µ—Ä–µ—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            query = {
                "local_filename": {"$exists": True},
                "selected_for_tagging": True,
                "hidden": {"$ne": True},
                "$and": [
                    {"ximilar_tags": {"$exists": False}},
                    {"ximilar_objects_structured": {"$exists": False}}
                ]
            }
            projection = {"_id": 1, "local_filename": 1, "username": 1, "likes_count": 1, "comments_count": 1, "caption": 1, "selected_for_tagging": 1, "selected_at": 1}
            sort_field = "selected_at"

        elif gallery_type == 'gallery_tagged':
            # –ì–∞–ª–µ—Ä–µ—è –æ—Ç—Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            query = {
                "local_filename": {"$exists": True},
                "hidden": {"$ne": True},
                "$or": [
                    {"ximilar_objects_structured": {"$exists": True, "$ne": []}},
                    {"ximilar_tags": {"$exists": True, "$ne": []}}
                ]
            }
            projection = {
                "_id": 1, "local_filename": 1, "username": 1, "likes_count": 1,
                "comments_count": 1, "caption": 1, "ximilar_tags": 1,
                "ximilar_objects_structured": 1, "tagged_at": 1, "ximilar_tagged_at": 1,
                "timestamp": 1
            }
            sort_field = "ximilar_tagged_at"
        else:
            return jsonify({'success': False, 'message': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –≥–∞–ª–µ—Ä–µ–∏'})

        # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        images = list(parser.collection.find(query, projection).sort(sort_field, -1).skip(offset).limit(limit))

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º ObjectId –≤ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è JSON
        from bson import ObjectId
        for image in images:
            image['_id'] = str(image['_id'])

        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        total_count = parser.collection.count_documents(query)

        return jsonify({
            'success': True,
            'images': images,
            'offset': offset,
            'limit': limit,
            'total_count': total_count,
            'has_more': (offset + limit) < total_count
        })

    except Exception as e:
        return jsonify({'success': False, 'message': f'–û—à–∏–±–∫–∞: {e}'})

if __name__ == '__main__':
    print("üåê –ó–ê–ü–£–°–ö –í–ï–ë-–ò–ù–¢–ï–†–§–ï–ô–°–ê –î–õ–Ø –ü–ê–†–°–ò–ù–ì–ê INSTAGRAM")
    print("="*60)
    print("üì° –°–µ—Ä–≤–µ—Ä: http://0.0.0.0:5000")
    print("üîó WebSocket: ws://0.0.0.0:5000/socket.io/")
    print("="*60)
    
    socketio.run(app, host='0.0.0.0', port=5000, debug=False, allow_unsafe_werkzeug=True)
