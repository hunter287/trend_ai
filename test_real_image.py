#!/usr/bin/env python3
"""
–¢–µ—Å—Ç Ximilar API —Å —Ä–µ–∞–ª—å–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
"""

import os
import requests
import pymongo
from dotenv import load_dotenv

load_dotenv()

def test_with_real_image():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏–∑ MongoDB"""
    api_key = os.getenv("XIMILAR_API_KEY")
    
    if not api_key:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω XIMILAR_API_KEY")
        return False
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É–±–ª–∏—á–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∞
    image_url = "https://images.unsplash.com/photo-1441986300917-64674bd600d8?w=500"
    print(f"üñºÔ∏è –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –ø—É–±–ª–∏—á–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º:")
    print(f"   URL: {image_url}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º API
    headers = {
        "Authorization": f"Token {api_key}",
        "Content-Type": "application/json"
    }
    
    payload = {
        "records": [
            {
                "_id": "test_real",
                "_url": image_url
            }
        ]
    }
    
    try:
        print("üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Ximilar API...")
        response = requests.post(
            "https://api.ximilar.com/tagging/fashion/v2/detect_tags_all",
            headers=headers,
            json=payload,
            timeout=30
        )
        
        print(f"üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            
            if result.get("records") and len(result["records"]) > 0:
                record = result["records"][0]
                if record.get("_tags"):
                    print(f"üè∑Ô∏è –ù–∞–π–¥–µ–Ω–æ {len(record['_tags'])} —Ç–µ–≥–æ–≤:")
                    for i, tag in enumerate(record["_tags"][:5], 1):
                        name = tag.get("name", "N/A")
                        confidence = tag.get("confidence", 0)
                        print(f"   {i}. {name} ({confidence:.2f})")
                else:
                    print("‚ùå –¢–µ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            else:
                print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ")
            
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")
            print(f"üìã –û—Ç–≤–µ—Ç: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

if __name__ == "__main__":
    success = test_with_real_image()
    if success:
        print("\nüéâ –¢–µ—Å—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\nüí• –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª")
