"""
–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–∏–º–µ—Ä —Å–∫—Ä–∞–ø–∏–Ω–≥–∞ —Å Apify

–≠—Ç–æ—Ç –ø—Ä–∏–º–µ—Ä –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–æ—Ç–æ–≤—ã–µ –∞–∫—Ç–æ—Ä—ã Apify –¥–ª—è —Å–∫—Ä–∞–ø–∏–Ω–≥–∞:
1. Google Shopping - –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤
2. Instagram - –ø—Ä–æ—Ñ–∏–ª–∏ –∏ –ø–æ—Å—Ç—ã
3. LinkedIn - –ø—Ä–æ—Ñ–∏–ª–∏ –∫–æ–º–ø–∞–Ω–∏–π
4. Twitter - —Ç–≤–∏—Ç—ã –∏ –ø—Ä–æ—Ñ–∏–ª–∏
"""

import os
import time
import json
from dotenv import load_dotenv
from apify_client import ApifyClient
import pandas as pd

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

class ApifyScraper:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–∫—Ä–∞–ø–∏–Ω–≥–∞ —Å –ø–æ–º–æ—â—å—é Apify –∞–∫—Ç–æ—Ä–æ–≤"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Apify"""
        self.api_token = os.getenv('APIFY_API_TOKEN')
        if not self.api_token:
            raise ValueError("API —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ APIFY_API_TOKEN –≤ .env —Ñ–∞–π–ª–µ")
        
        self.client = ApifyClient(self.api_token)
        print("‚úÖ Apify –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def scrape_google_shopping(self, queries: list, max_items: int = 20):
        """
        –°–∫—Ä–∞–ø–∏–Ω–≥ Google Shopping
        
        Args:
            queries: –°–ø–∏—Å–æ–∫ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            max_items: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –∑–∞–ø—Ä–æ—Å
        """
        print(f"\nüõí –°–∫—Ä–∞–ø–∏–Ω–≥ Google Shopping –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤: {queries}")
        
        # ID –∞–∫—Ç–æ—Ä–∞ Google Shopping
        actor_id = "apify/google-shopping-scraper"
        
        # –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        input_data = {
            "queries": queries,
            "maxItemsPerQuery": max_items,
            "maxRequestRetries": 3,
            "maxConcurrency": 5
        }
        
        return self._run_actor_and_get_results(actor_id, input_data, "google_shopping")
    
    def scrape_instagram_profiles(self, usernames: list):
        """
        –°–∫—Ä–∞–ø–∏–Ω–≥ –ø—Ä–æ—Ñ–∏–ª–µ–π Instagram
        
        Args:
            usernames: –°–ø–∏—Å–æ–∫ –∏–º–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        """
        print(f"\nüì∏ –°–∫—Ä–∞–ø–∏–Ω–≥ –ø—Ä–æ—Ñ–∏–ª–µ–π Instagram: {usernames}")
        
        # ID –∞–∫—Ç–æ—Ä–∞ Instagram
        actor_id = "apify/instagram-profile-scraper"
        
        # –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        input_data = {
            "usernames": usernames,
            "resultsType": "details",
            "maxRequestRetries": 3
        }
        
        return self._run_actor_and_get_results(actor_id, input_data, "instagram_profiles")
    
    def scrape_linkedin_companies(self, company_names: list):
        """
        –°–∫—Ä–∞–ø–∏–Ω–≥ –∫–æ–º–ø–∞–Ω–∏–π LinkedIn
        
        Args:
            company_names: –°–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π –∫–æ–º–ø–∞–Ω–∏–π
        """
        print(f"\nüíº –°–∫—Ä–∞–ø–∏–Ω–≥ –∫–æ–º–ø–∞–Ω–∏–π LinkedIn: {company_names}")
        
        # ID –∞–∫—Ç–æ—Ä–∞ LinkedIn
        actor_id = "apify/linkedin-company-scraper"
        
        # –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        input_data = {
            "companyNames": company_names,
            "maxRequestRetries": 3
        }
        
        return self._run_actor_and_get_results(actor_id, input_data, "linkedin_companies")
    
    def scrape_twitter_profiles(self, usernames: list):
        """
        –°–∫—Ä–∞–ø–∏–Ω–≥ –ø—Ä–æ—Ñ–∏–ª–µ–π Twitter
        
        Args:
            usernames: –°–ø–∏—Å–æ–∫ –∏–º–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        """
        print(f"\nüê¶ –°–∫—Ä–∞–ø–∏–Ω–≥ –ø—Ä–æ—Ñ–∏–ª–µ–π Twitter: {usernames}")
        
        # ID –∞–∫—Ç–æ—Ä–∞ Twitter
        actor_id = "apify/twitter-profile-scraper"
        
        # –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        input_data = {
            "usernames": usernames,
            "maxRequestRetries": 3
        }
        
        return self._run_actor_and_get_results(actor_id, input_data, "twitter_profiles")
    
    def _run_actor_and_get_results(self, actor_id: str, input_data: dict, output_prefix: str):
        """
        –ó–∞–ø—É—Å–∫ –∞–∫—Ç–æ—Ä–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        
        Args:
            actor_id: ID –∞–∫—Ç–æ—Ä–∞
            input_data: –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            output_prefix: –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è —Ñ–∞–π–ª–æ–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        """
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–∫—Ç–æ—Ä
            print(f"üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –∞–∫—Ç–æ—Ä {actor_id}...")
            run = self.client.actor(actor_id).call(input_data)
            run_id = run['id']
            print(f"‚úÖ –ê–∫—Ç–æ—Ä –∑–∞–ø—É—â–µ–Ω —Å ID: {run_id}")
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            print("‚è≥ –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
            while True:
                run_info = self.client.run(run_id).get()
                status = run_info.get('status')
                
                if status == 'SUCCEEDED':
                    print("‚úÖ –ê–∫—Ç–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                    break
                elif status in ['FAILED', 'ABORTED']:
                    print(f"‚ùå –ê–∫—Ç–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º: {status}")
                    return None
                
                time.sleep(10)  # –ñ–¥–µ–º 10 —Å–µ–∫—É–Ω–¥
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            dataset_id = run_info.get('defaultDatasetId')
            if not dataset_id:
                print("‚ùå Dataset ID –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return None
            
            print("üìä –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...")
            dataset_items = self.client.dataset(dataset_id).list_items()
            items = dataset_items.items
            
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            self._save_results(items, output_prefix)
            
            return items
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–∫—Ç–æ—Ä–∞: {e}")
            return None
    
    def _save_results(self, items: list, prefix: str):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã"""
        if not items:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON
        json_filename = f"{prefix}_results.json"
        with open(json_filename, 'w', encoding='utf-8') as f:
            json.dump(items, f, ensure_ascii=False, indent=2)
        print(f"üíæ JSON —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {json_filename}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ CSV
        try:
            df = pd.DataFrame(items)
            csv_filename = f"{prefix}_results.csv"
            df.to_csv(csv_filename, index=False, encoding='utf-8')
            print(f"üíæ CSV —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {csv_filename}")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ CSV: {e}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print(f"\nüìã –ü–µ—Ä–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        for i, item in enumerate(items[:3]):
            if isinstance(item, dict):
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª—é—á–∏ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
                keys = list(item.keys())[:5]  # –ü–µ—Ä–≤—ã–µ 5 –∫–ª—é—á–µ–π
                print(f"  {i+1}. –ö–ª—é—á–∏: {keys}")
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏–π
                for key in keys[:3]:
                    value = str(item.get(key, ''))[:50]  # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                    print(f"     {key}: {value}...")
            else:
                print(f"  {i+1}. {str(item)[:100]}...")
            print()


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞"""
    print("üöÄ –ü–†–ê–ö–¢–ò–ß–ï–°–ö–ò–ï –ü–†–ò–ú–ï–†–´ –°–ö–†–ê–ü–ò–ù–ì–ê –° APIFY")
    print("="*60)
    
    try:
        scraper = ApifyScraper()
        
        # –ü—Ä–∏–º–µ—Ä 1: Google Shopping
        print("\n" + "="*40)
        print("–ü–†–ò–ú–ï–† 1: GOOGLE SHOPPING")
        print("="*40)
        
        shopping_queries = ["laptop", "smartphone"]
        scraper.scrape_google_shopping(shopping_queries, max_items=10)
        
        # –ü—Ä–∏–º–µ—Ä 2: Instagram (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω, —Ç–∞–∫ –∫–∞–∫ —Ç—Ä–µ–±—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
        print("\n" + "="*40)
        print("–ü–†–ò–ú–ï–† 2: INSTAGRAM PROFILES")
        print("="*40)
        print("üí° –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Instagram —Å–∫—Ä–∞–ø–∏–Ω–≥–∞ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –∫–æ–¥ –Ω–∏–∂–µ")
        print("   –∏ —É–∫–∞–∂–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        # instagram_users = ["instagram", "nike"]  # –ü—Ä–∏–º–µ—Ä—ã
        # scraper.scrape_instagram_profiles(instagram_users)
        
        # –ü—Ä–∏–º–µ—Ä 3: LinkedIn (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω)
        print("\n" + "="*40)
        print("–ü–†–ò–ú–ï–† 3: LINKEDIN COMPANIES")
        print("="*40)
        print("üí° –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è LinkedIn —Å–∫—Ä–∞–ø–∏–Ω–≥–∞ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –∫–æ–¥ –Ω–∏–∂–µ")
        
        # linkedin_companies = ["microsoft", "google"]  # –ü—Ä–∏–º–µ—Ä—ã
        # scraper.scrape_linkedin_companies(linkedin_companies)
        
        # –ü—Ä–∏–º–µ—Ä 4: Twitter (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω)
        print("\n" + "="*40)
        print("–ü–†–ò–ú–ï–† 4: TWITTER PROFILES")
        print("="*40)
        print("üí° –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Twitter —Å–∫—Ä–∞–ø–∏–Ω–≥–∞ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –∫–æ–¥ –Ω–∏–∂–µ")
        
        # twitter_users = ["elonmusk", "twitter"]  # –ü—Ä–∏–º–µ—Ä—ã
        # scraper.scrape_twitter_profiles(twitter_users)
        
    except ValueError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        print("\nüí° –î–ª—è —Ä–∞–±–æ—Ç—ã:")
        print("1. –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env")
        print("2. –î–æ–±–∞–≤—å—Ç–µ: APIFY_API_TOKEN=–≤–∞—à_—Ç–æ–∫–µ–Ω")
        print("3. –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω –Ω–∞ https://console.apify.com/account/integrations")
    
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    main()
