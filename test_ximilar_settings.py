#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Ximilar API —Å —Ä–∞–∑–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
"""

import os
import requests
from dotenv import load_dotenv

load_dotenv()

def test_ximilar_with_settings():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Ximilar API —Å —Ä–∞–∑–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
    
    api_key = os.getenv("XIMILAR_API_KEY")
    if not api_key:
        print("‚ùå XIMILAR_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
        return
    
    # –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –æ–¥–µ–∂–¥–æ–π
    test_image_url = "https://images.unsplash.com/photo-1441986300917-64674bd600d8?w=500"
    
    headers = {
        "Authorization": f"Token {api_key}",
        "Content-Type": "application/json"
    }
    
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï XIMILAR API –° –†–ê–ó–ù–´–ú–ò –ù–ê–°–¢–†–û–ô–ö–ê–ú–ò")
    print("=" * 60)
    
    # –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    print("\n1Ô∏è‚É£ –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
    payload1 = {
        "records": [
            {
                "_id": "1",
                "_url": test_image_url
            }
        ]
    }
    
    try:
        response = requests.post(
            "https://api.ximilar.com/tagging/fashion/v2/detect_tags_all",
            headers=headers,
            json=payload1,
            timeout=60
        )
        
        if response.status_code == 200:
            result = response.json()
            print(f"   ‚úÖ –°—Ç–∞—Ç—É—Å: {response.status_code}")
            print(f"   üìä –ó–∞–ø–∏—Å–µ–π: {len(result.get('records', []))}")
            
            if result.get("records"):
                record = result["records"][0]
                tags = record.get("_tags", [])
                print(f"   üè∑Ô∏è –¢–µ–≥–æ–≤: {len(tags)}")
                
                for tag in tags[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 —Ç–µ–≥–æ–≤
                    if isinstance(tag, dict):
                        print(f"     - {tag.get('name', 'N/A')} (confidence: {tag.get('confidence', 0):.3f})")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {response.status_code} - {response.text}")
            
    except Exception as e:
        print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
    
    # –¢–µ—Å—Ç 2: –° –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    print("\n2Ô∏è‚É£ –° –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:")
    payload2 = {
        "records": [
            {
                "_id": "1",
                "_url": test_image_url
            }
        ],
        "options": {
            "return_bbox": True,
            "return_confidence": True,
            "min_confidence": 0.1  # –ù–∏–∑–∫–∏–π –ø–æ—Ä–æ–≥ confidence
        }
    }
    
    try:
        response = requests.post(
            "https://api.ximilar.com/tagging/fashion/v2/detect_tags_all",
            headers=headers,
            json=payload2,
            timeout=60
        )
        
        if response.status_code == 200:
            result = response.json()
            print(f"   ‚úÖ –°—Ç–∞—Ç—É—Å: {response.status_code}")
            print(f"   üìä –ó–∞–ø–∏—Å–µ–π: {len(result.get('records', []))}")
            
            if result.get("records"):
                record = result["records"][0]
                tags = record.get("_tags", [])
                print(f"   üè∑Ô∏è –¢–µ–≥–æ–≤: {len(tags)}")
                
                for tag in tags[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 —Ç–µ–≥–æ–≤
                    if isinstance(tag, dict):
                        print(f"     - {tag.get('name', 'N/A')} (confidence: {tag.get('confidence', 0):.3f})")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {response.status_code} - {response.text}")
            
    except Exception as e:
        print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
    
    # –¢–µ—Å—Ç 3: –° –¥—Ä—É–≥–∏–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
    print("\n3Ô∏è‚É£ –° –¥—Ä—É–≥–∏–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º (–º–æ–¥–Ω–∞—è –æ–¥–µ–∂–¥–∞):")
    fashion_image_url = "https://images.unsplash.com/photo-1594633312681-425c7b97ccd1?w=500"
    
    payload3 = {
        "records": [
            {
                "_id": "1",
                "_url": fashion_image_url
            }
        ]
    }
    
    try:
        response = requests.post(
            "https://api.ximilar.com/tagging/fashion/v2/detect_tags_all",
            headers=headers,
            json=payload3,
            timeout=60
        )
        
        if response.status_code == 200:
            result = response.json()
            print(f"   ‚úÖ –°—Ç–∞—Ç—É—Å: {response.status_code}")
            print(f"   üìä –ó–∞–ø–∏—Å–µ–π: {len(result.get('records', []))}")
            
            if result.get("records"):
                record = result["records"][0]
                tags = record.get("_tags", [])
                print(f"   üè∑Ô∏è –¢–µ–≥–æ–≤: {len(tags)}")
                
                for tag in tags[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 —Ç–µ–≥–æ–≤
                    if isinstance(tag, dict):
                        print(f"     - {tag.get('name', 'N/A')} (confidence: {tag.get('confidence', 0):.3f})")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {response.status_code} - {response.text}")
            
    except Exception as e:
        print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")

if __name__ == "__main__":
    test_ximilar_with_settings()







