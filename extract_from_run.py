#!/usr/bin/env python3
"""
–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ Apify
"""

import os
import json
from dotenv import load_dotenv
from apify_client import ApifyClient
from pymongo import MongoClient

load_dotenv()
load_dotenv('mongodb_config.env')

def extract_from_run(run_id: str, limit: int = 100):
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞"""
    
    api_token = os.getenv("APIFY_API_TOKEN")
    if not api_token:
        print("‚ùå APIFY_API_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
        return
    
    client = ApifyClient(api_token)
    
    try:
        print(f"üîç –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∑–∞–ø—É—Å–∫–∞: {run_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—É—Å–∫–µ
        run = client.run(run_id).get()
        print(f"üìä –°—Ç–∞—Ç—É—Å –∑–∞–ø—É—Å–∫–∞: {run.get('status', 'N/A')}")
        print(f"üìÖ –ó–∞–ø—É—â–µ–Ω: {run.get('startedAt', 'N/A')}")
        print(f"üìÖ –ó–∞–≤–µ—Ä—à–µ–Ω: {run.get('finishedAt', 'N/A')}")
        
        if run.get('status') != 'SUCCEEDED':
            print("‚ùå –ó–∞–ø—É—Å–∫ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç–∞—Å–µ—Ç
        dataset_id = run.get('defaultDatasetId')
        if not dataset_id:
            print("‚ùå –î–∞—Ç–∞—Å–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        print(f"üìä –î–∞—Ç–∞—Å–µ—Ç ID: {dataset_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –¥–∞—Ç–∞—Å–µ—Ç–∞
        dataset = client.dataset(dataset_id)
        items = dataset.list_items(limit=limit)
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ {items.total} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        
        if not items.items:
            print("‚ùå –î–∞—Ç–∞—Å–µ—Ç –ø—É—Å—Ç–æ–π")
            return
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
        print(f"\nüìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö:")
        sample_item = items.items[0]
        print(f"   –ö–ª—é—á–∏: {list(sample_item.keys())}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        images_data = []
        for i, item in enumerate(items.items):
            print(f"   –û–±—Ä–∞–±–æ—Ç–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ {i+1}/{len(items.items)}")
            
            # –ò—â–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—è—Ö
            image_urls = []
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–µ 'images' (–º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ø–∏—Å–æ–∫)
            if 'images' in item and item['images']:
                if isinstance(item['images'], list):
                    image_urls.extend(item['images'])
                else:
                    image_urls.append(item['images'])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–µ 'displayUrl'
            if 'displayUrl' in item and item['displayUrl']:
                image_urls.append(item['displayUrl'])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ–ª—è
            for field in ['imageUrl', 'image', 'url', 'mediaUrl', 'thumbnailUrl']:
                if field in item and item[field]:
                    if isinstance(item[field], list):
                        image_urls.extend(item[field])
                    else:
                        image_urls.append(item[field])
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            if image_urls:
                for j, img_url in enumerate(image_urls):
                    if img_url and ('instagram.com' in img_url or 'cdninstagram.com' in img_url):
                        images_data.append({
                            'url': img_url,
                            'post_url': item.get('url', ''),
                            'caption': item.get('caption', ''),
                            'likes': item.get('likesCount', 0),
                            'comments': item.get('commentsCount', 0),
                            'publication_date': item.get('timestamp', ''),
                            'account_name': item.get('ownerUsername', ''),
                            'hashtags': item.get('hashtags', []),
                            'mentions': item.get('mentions', []),
                            'post_id': item.get('id', ''),
                            'short_code': item.get('shortCode', ''),
                            'dimensions': {
                                'width': item.get('dimensionsWidth', 0),
                                'height': item.get('dimensionsHeight', 0)
                            },
                            'source': 'apify_run',
                            'run_id': run_id,
                            'dataset_id': dataset_id
                        })
        
        print(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(images_data)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        output_file = f"extracted_images_{run_id}.json"
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(images_data, f, ensure_ascii=False, indent=2)
        
        print(f"üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {output_file}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ MongoDB
        save_to_mongodb(images_data)
        
        return images_data
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()

def save_to_mongodb(images_data):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ MongoDB"""
    try:
        client = MongoClient(os.getenv('MONGODB_URI', 'mongodb://trend_ai_user:|#!x1K52H.0{8d3@localhost:27017/instagram_gallery'))
        db = client["instagram_gallery"]
        collection = db["images"]
        
        saved_count = 0
        for img_data in images_data:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            existing = collection.find_one({"url": img_data["url"]})
            if not existing:
                collection.insert_one(img_data)
                saved_count += 1
        
        print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved_count} –Ω–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ MongoDB")
        client.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ MongoDB: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîç –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –î–ê–ù–ù–´–• –ò–ó –ö–û–ù–ö–†–ï–¢–ù–û–ì–û –ó–ê–ü–£–°–ö–ê APIFY")
    print("=" * 60)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–π ID –∑–∞–ø—É—Å–∫–∞
    run_id = "2kExkDIAwlqdRuvtD"
    
    print(f"üìä –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—É—Å–∫–∞: {run_id}")
    
    # –í—ã–±–∏—Ä–∞–µ–º –ª–∏–º–∏—Ç
    limit = input("–õ–∏–º–∏—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (Enter –¥–ª—è 100): ").strip()
    limit = int(limit) if limit else 100
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    extract_from_run(run_id, limit)

if __name__ == "__main__":
    main()


