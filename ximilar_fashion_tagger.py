#!/usr/bin/env python3
"""
Ximilar Fashion API –¥–ª—è —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ–¥–µ–∂–¥—ã –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö
"""

import os
import json
import requests
import pymongo
from datetime import datetime
from typing import List, Dict, Optional
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
load_dotenv('mongodb_config.env')

class XimilarFashionTagger:
    def __init__(self, ximilar_api_key: str, mongodb_uri: str = None):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–≥–≥–µ—Ä–∞"""
        self.ximilar_api_key = ximilar_api_key
        self.mongodb_uri = mongodb_uri or os.getenv('MONGODB_URI', 'mongodb://trend_ai_user:|#!x1K52H.0{8d3@localhost:27017/instagram_gallery')
        self.api_url = "https://api.ximilar.com/tagging/fashion/v2/detect_tags_all"
        self.client = None
        self.db = None
        self.collection = None
        
    def connect_mongodb(self) -> bool:
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB"""
        try:
            self.client = pymongo.MongoClient(self.mongodb_uri)
            self.db = self.client["instagram_gallery"]
            self.collection = self.db["images"]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            self.client.admin.command('ping')
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB: {e}")
            return False
    
    def _categorize_property(self, category: str) -> str:
        """–ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è —Å–≤–æ–π—Å—Ç–≤ –ø–æ —Ç–∏–ø–∞–º"""
        category_lower = category.lower()
        
        # –í–∏–∑—É–∞–ª—å–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã
        if any(word in category_lower for word in ['color', 'pattern', 'texture', 'shape', 'size', 'length', 'width', 'height']):
            return "visual_attributes"
        
        # –°—Ç–∏–ª–µ–≤—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã
        elif any(word in category_lower for word in ['style', 'fashion', 'trend', 'design', 'cut', 'fit', 'silhouette']):
            return "style_attributes"
        
        # –¶–≤–µ—Ç–æ–≤—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã
        elif any(word in category_lower for word in ['color', 'hue', 'shade', 'tone', 'brightness']):
            return "color_attributes"
        
        # –ú–∞—Ç–µ—Ä–∏–∞–ª—å–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã
        elif any(word in category_lower for word in ['material', 'fabric', 'textile', 'leather', 'cotton', 'silk', 'wool']):
            return "material_attributes"
        
        # –ë—Ä–µ–Ω–¥–æ–≤—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã
        elif any(word in category_lower for word in ['brand', 'logo', 'label', 'manufacturer']):
            return "brand_attributes"
        
        # –û—Å—Ç–∞–ª—å–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã
        else:
            return "other_attributes"
    
    def get_untagged_images(self, limit: int = 100) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–µ–∑ —Ç–µ–≥–æ–≤ Ximilar"""
        try:
            # –ò—â–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–µ–∑ –ø–æ–ª—è ximilar_tags
            query = {
                "full_image_url": {"$exists": True},
                "$or": [
                    {"ximilar_tags": {"$exists": False}},
                    {"ximilar_tags": None},
                    {"ximilar_tags": []}
                ]
            }
            
            images = list(self.collection.find(query).limit(limit))
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–µ–∑ —Ç–µ–≥–æ–≤ Ximilar")
            return images
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}")
            return []
    
    def tag_image_with_ximilar(self, image_url: str, max_retries: int = 3) -> Optional[Dict]:
        """–¢–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Ximilar API —Å retry"""
        headers = {
            "Authorization": f"Token {self.ximilar_api_key}",
            "Content-Type": "application/json"
        }
        
        payload = {
            "records": [
                {
                    "_id": "1",
                    "_url": image_url
                }
            ]
        }
        
        print(f"üè∑Ô∏è –¢–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ: {image_url[:50]}...")
        
        for attempt in range(max_retries):
            try:
                if attempt > 0:
                    print(f"   üîÑ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}")
                    import time
                    time.sleep(2)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
                
                response = requests.post(
                    self.api_url,
                    headers=headers,
                    json=payload,
                    timeout=60  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º timeout –¥–æ 60 —Å–µ–∫—É–Ω–¥
                )
            
                if response.status_code == 200:
                    result = response.json()
                    
                    if result.get("records") and len(result["records"]) > 0:
                        record = result["records"][0]
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–±—ä–µ–∫—Ç—ã —Å –∏—Ö —Ç–µ–≥–∞–º–∏ (–æ–±—ä–µ–∫—Ç–Ω–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞)
                        objects = []
                        if record.get("_objects"):
                            for obj in record["_objects"]:
                                object_data = {
                                    "object_id": obj.get("id", ""),
                                    "name": obj.get("name", ""),
                                    "top_category": obj.get("Top Category", ""),
                                    "bound_box": obj.get("bound_box", []),
                                    "probability": obj.get("prob", 0.0),
                                    "area": obj.get("area", 0.0),
                                    "properties": {
                                        "basic_info": {
                                            "name": obj.get("name", ""),
                                            "category": obj.get("Top Category", ""),
                                            "confidence": obj.get("prob", 0.0),
                                            "area": obj.get("area", 0.0)
                                        },
                                        "visual_attributes": {},
                                        "style_attributes": {},
                                        "color_attributes": {},
                                        "material_attributes": {},
                                        "brand_attributes": {},
                                        "other_attributes": {}
                                    },
                                    "tags_simple": [],
                                    "tags_map": {}
                                }
                                
                                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–≥–∏ –æ–±—ä–µ–∫—Ç–∞ –∏ –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º —Å–≤–æ–π—Å—Ç–≤
                                if obj.get("_tags"):
                                    obj_tags = obj["_tags"]
                                    
                                    # –ü—Ä–æ—Å—Ç—ã–µ —Ç–µ–≥–∏
                                    if obj_tags.get("_tags_simple"):
                                        object_data["tags_simple"] = obj_tags["_tags_simple"]
                                    
                                    # –ö–∞—Ä—Ç–∞ —Ç–µ–≥–æ–≤
                                    if obj_tags.get("_tags_map"):
                                        object_data["tags_map"] = obj_tags["_tags_map"]
                                    
                                    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç–µ–≥–∏ –ø–æ —Ç–∏–ø–∞–º —Å–≤–æ–π—Å—Ç–≤
                                    for category, tag_list in obj_tags.items():
                                        if category not in ["_tags_simple", "_tags_map"] and isinstance(tag_list, list):
                                            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–≤–æ–π—Å—Ç–≤–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                                            property_type = self._categorize_property(category)
                                            
                                            if property_type not in object_data["properties"]:
                                                object_data["properties"][property_type] = {}
                                            
                                            object_data["properties"][property_type][category] = []
                                            for tag in tag_list:
                                                if isinstance(tag, dict):
                                                    tag_data = {
                                                        "name": tag.get("name", ""),
                                                        "confidence": tag.get("prob", 0.0),
                                                        "id": tag.get("id", ""),
                                                        "category": category
                                                    }
                                                    object_data["properties"][property_type][category].append(tag_data)
                                
                                objects.append(object_data)
                        
                        # –°–æ–∑–¥–∞–µ–º –ø–ª–æ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                        tags = []
                        for obj in objects:
                            for property_type, properties in obj["properties"].items():
                                if isinstance(properties, dict):
                                    for category, tag_list in properties.items():
                                        if isinstance(tag_list, list):
                                            for tag in tag_list:
                                                tags.append({
                                                    "name": tag["name"],
                                                    "confidence": tag["confidence"],
                                                    "category": category,
                                                    "property_type": property_type,
                                                    "object_id": obj["object_id"],
                                                    "object_name": obj["name"]
                                                })
                        
                        return {
                            "success": True,
                            "tags": tags,
                            "objects": objects,
                            "total_tags": len(tags),
                            "total_objects": len(objects),
                            "api_response": result
                        }
                    else:
                        return {
                            "success": False,
                            "error": "No tags returned",
                            "api_response": result
                        }
                else:
                    if attempt == max_retries - 1:  # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞
                        return {
                            "success": False,
                            "error": f"HTTP {response.status_code}: {response.text}",
                            "api_response": None
                        }
                    else:
                        print(f"   ‚ö†Ô∏è HTTP {response.status_code}, –ø–æ–≤—Ç–æ—Ä—è–µ–º...")
                        continue
                        
            except Exception as e:
                if attempt == max_retries - 1:  # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞
                    return {
                        "success": False,
                        "error": str(e),
                        "api_response": None
                    }
                else:
                    print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)[:50]}..., –ø–æ–≤—Ç–æ—Ä—è–µ–º...")
                    continue
        
        # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã
        return {
            "success": False,
            "error": f"–í—Å–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫ –∏—Å—á–µ—Ä–ø–∞–Ω—ã",
            "api_response": None
        }
    
    def update_image_with_tags(self, image_id: str, tags_data: Dict) -> bool:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ MongoDB —Å —Ç–µ–≥–∞–º–∏ (–æ–±—ä–µ–∫—Ç–Ω–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞)"""
        try:
            update_data = {
                # –ù–æ–≤–∞—è –æ–±—ä–µ–∫—Ç–Ω–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
                "ximilar_objects_structured": tags_data.get("objects", []),
                "ximilar_properties_summary": self._create_properties_summary(tags_data.get("objects", [])),
                
                # –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
                "ximilar_tags": tags_data.get("tags", []),
                "ximilar_objects": tags_data.get("objects", []),
                "ximilar_total_tags": tags_data.get("total_tags", 0),
                "ximilar_total_objects": tags_data.get("total_objects", 0),
                "ximilar_tagged_at": datetime.now().isoformat(),
                "ximilar_success": tags_data.get("success", False)
            }
            
            if not tags_data.get("success"):
                update_data["ximilar_error"] = tags_data.get("error", "Unknown error")
            
            result = self.collection.update_one(
                {"_id": image_id},
                {"$set": update_data}
            )
            
            if result.modified_count > 0:
                print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {image_id} —Å –æ–±—ä–µ–∫—Ç–Ω–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π")
                return True
            else:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {image_id}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {image_id}: {e}")
            return False
    
    def _create_properties_summary(self, objects: List[Dict]) -> Dict:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø–æ —Å–≤–æ–π—Å—Ç–≤–∞–º –æ–±—ä–µ–∫—Ç–æ–≤"""
        summary = {
            "total_objects": len(objects),
            "property_types": {},
            "most_common_properties": {},
            "objects_by_category": {}
        }
        
        for obj in objects:
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            category = obj.get("top_category", "unknown")
            if category not in summary["objects_by_category"]:
                summary["objects_by_category"][category] = 0
            summary["objects_by_category"][category] += 1
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–≤–æ–π—Å—Ç–≤–∞
            properties = obj.get("properties", {})
            for property_type, property_data in properties.items():
                if isinstance(property_data, dict):
                    if property_type not in summary["property_types"]:
                        summary["property_types"][property_type] = 0
                    summary["property_types"][property_type] += len(property_data)
        
        return summary
    
    def tag_batch_images(self, batch_size: int = 10, max_images: int = 100):
        """–¢–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        print(f"üè∑Ô∏è –ó–ê–ü–£–°–ö –¢–ï–ì–ò–†–û–í–ê–ù–ò–Ø –ß–ï–†–ï–ó XIMILAR")
        print("="*50)
        
        if not self.connect_mongodb():
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        images = self.get_untagged_images(max_images)
        if not images:
            print("‚ùå –ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è")
            return False
        
        print(f"üìä –ë—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        
        success_count = 0
        error_count = 0
        
        for i, image in enumerate(images, 1):
            try:
                image_id = image["_id"]
                image_url = image.get("full_image_url")
                
                if not image_url:
                    print(f"‚ö†Ô∏è [{i}/{len(images)}] –ü—Ä–æ–ø—É—â–µ–Ω–æ: –Ω–µ—Ç URL")
                    continue
                
                print(f"\nüîÑ [{i}/{len(images)}] –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
                print(f"   ‚Ä¢ ID: {image_id}")
                print(f"   ‚Ä¢ URL: {image_url[:60]}...")
                
                # –¢–µ–≥–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                tags_result = self.tag_image_with_ximilar(image_url)
                
                if tags_result:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –≤ MongoDB
                    if self.update_image_with_tags(image_id, tags_result):
                        success_count += 1
                        
                        if tags_result.get("success"):
                            tags_count = tags_result.get("total_tags", 0)
                            print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ: {tags_count} —Ç–µ–≥–æ–≤")
                            
                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-3 —Ç–µ–≥–∞
                            if tags_result.get("tags"):
                                top_tags = sorted(
                                    tags_result["tags"], 
                                    key=lambda x: x.get("confidence", 0), 
                                    reverse=True
                                )[:3]
                                
                                print(f"   üè∑Ô∏è –¢–æ–ø —Ç–µ–≥–∏:")
                                for tag in top_tags:
                                    name = tag.get("name", "N/A")
                                    confidence = tag.get("confidence", 0)
                                    print(f"      ‚Ä¢ {name} ({confidence:.2f})")
                        else:
                            print(f"   ‚ùå –û—à–∏–±–∫–∞ API: {tags_result.get('error', 'Unknown')}")
                            error_count += 1
                    else:
                        error_count += 1
                else:
                    print(f"   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–≥–∏")
                    error_count += 1
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                if i % 5 == 0:
                    print(f"   ‚è∏Ô∏è –ü–∞—É–∑–∞ 2 —Å–µ–∫—É–Ω–¥—ã...")
                    import time
                    time.sleep(2)
                
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
                error_count += 1
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print(f"\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print("="*30)
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {success_count}")
        print(f"‚ùå –û—à–∏–±–æ–∫: {error_count}")
        print(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_count/(success_count+error_count)*100:.1f}%")
        
        return success_count > 0
    
    def get_tagged_images_stats(self):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º"""
        try:
            if not self.connect_mongodb():
                return
            
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total_images = self.collection.count_documents({})
            tagged_images = self.collection.count_documents({"ximilar_tags": {"$exists": True, "$ne": []}})
            untagged_images = total_images - tagged_images
            
            print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–ï–ì–ò–†–û–í–ê–ù–ò–Ø:")
            print("="*30)
            print(f"üì∏ –í—Å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {total_images}")
            print(f"üè∑Ô∏è –° —Ç–µ–≥–∞–º–∏: {tagged_images}")
            print(f"‚ùì –ë–µ–∑ —Ç–µ–≥–æ–≤: {untagged_images}")
            print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {tagged_images/total_images*100:.1f}%")
            
            # –¢–æ–ø —Ç–µ–≥–∏
            pipeline = [
                {"$match": {"ximilar_tags": {"$exists": True, "$ne": []}}},
                {"$unwind": "$ximilar_tags"},
                {"$group": {
                    "_id": "$ximilar_tags.name",
                    "count": {"$sum": 1},
                    "avg_confidence": {"$avg": "$ximilar_tags.confidence"}
                }},
                {"$sort": {"count": -1}},
                {"$limit": 10}
            ]
            
            top_tags = list(self.collection.aggregate(pipeline))
            
            if top_tags:
                print(f"\nüè∑Ô∏è –¢–û–ü-10 –¢–ï–ì–û–í:")
                print("-" * 30)
                for i, tag in enumerate(top_tags, 1):
                    name = tag["_id"]
                    count = tag["count"]
                    avg_conf = tag["avg_confidence"]
                    print(f"{i:2d}. {name:<20} ({count} —Ä–∞–∑, {avg_conf:.2f})")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    def show_object_structure(self, image_id: str = None):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        try:
            if not self.connect_mongodb():
                return
            
            if image_id:
                # –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                image = self.collection.find_one({"_id": image_id})
                if not image:
                    print(f"‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {image_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                    return
                
                print(f"\nüîç –°–¢–†–£–ö–¢–£–†–ê –û–ë–™–ï–ö–¢–û–í –î–õ–Ø –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø {image_id}")
                print("="*60)
                
                if "ximilar_objects_structured" in image:
                    for i, obj in enumerate(image["ximilar_objects_structured"], 1):
                        print(f"\nüì¶ –û–ë–™–ï–ö–¢ {i}: {obj.get('name', 'Unknown')}")
                        print(f"   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {obj.get('top_category', 'Unknown')}")
                        print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {obj.get('probability', 0):.2f}")
                        print(f"   –û–±–ª–∞—Å—Ç—å: {obj.get('bound_box', [])}")
                        
                        properties = obj.get("properties", {})
                        for prop_type, prop_data in properties.items():
                            if isinstance(prop_data, dict) and prop_data:
                                print(f"   {prop_type.upper()}:")
                                for category, tags in prop_data.items():
                                    if isinstance(tags, list) and tags:
                                        print(f"     {category}: {[tag.get('name', '') for tag in tags]}")
                else:
                    print("‚ùå –ù–µ—Ç –æ–±—ä–µ–∫—Ç–Ω–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç—Ç–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            else:
                # –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
                image = self.collection.find_one({"ximilar_objects_structured": {"$exists": True, "$ne": []}})
                if image:
                    self.show_object_structure(str(image["_id"]))
                else:
                    print("‚ùå –ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –æ–±—ä–µ–∫—Ç–Ω–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üè∑Ô∏è XIMILAR FASHION TAGGING")
    print("="*40)
    
    # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á
    ximilar_api_key = os.getenv("XIMILAR_API_KEY")
    if not ximilar_api_key:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω XIMILAR_API_KEY –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print("üí° –î–æ–±–∞–≤—å—Ç–µ –≤ .env —Ñ–∞–π–ª: XIMILAR_API_KEY=your_key")
        return
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ–≥–≥–µ—Ä
    tagger = XimilarFashionTagger(ximilar_api_key)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    tagger.get_tagged_images_stats()
    
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print(f"\nü§î –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?")
    print("1. –¢–µ–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    print("2. –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
    print("3. –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ–±—ä–µ–∫—Ç–æ–≤")
    print("4. –í—ã—Ö–æ–¥")
    
    choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ (1-4): ").strip()
    
    if choice == "1":
        try:
            max_images = int(input("–ú–∞–∫—Å–∏–º—É–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (Enter –¥–ª—è 50): ") or "50")
            batch_size = int(input("–†–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞ (Enter –¥–ª—è 10): ") or "10")
            
            tagger.tag_batch_images(batch_size, max_images)
        except ValueError:
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
    elif choice == "2":
        tagger.get_tagged_images_stats()
    elif choice == "3":
        image_id = input("ID –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (Enter –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞): ").strip()
        tagger.show_object_structure(image_id if image_id else None)
    else:
        print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")

if __name__ == "__main__":
    main()
