"""
–ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—É—Å–∫–æ–≤ Instagram —Å–∫—Ä–∞–ø–µ—Ä–∞
"""

import os
import json
from dotenv import load_dotenv
from apify_client import ApifyClient

load_dotenv()

def check_successful_runs():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —É—Å–ø–µ—à–Ω—ã–µ –∑–∞–ø—É—Å–∫–∏ –∏ –∏—Ö –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
    
    client = ApifyClient(os.getenv('APIFY_API_TOKEN'))
    actor_id = "shu8hvrXbJbY3Eb9W"
    
    print("üîç –ê–ù–ê–õ–ò–ó –£–°–ü–ï–®–ù–´–• –ó–ê–ü–£–°–ö–û–í INSTAGRAM –°–ö–†–ê–ü–ï–†–ê")
    print("="*60)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø—É—Å–∫–∏
        runs = client.actor(actor_id).runs().list(limit=20)
        
        successful_runs = []
        for run in runs.items:
            if run.get('status') == 'SUCCEEDED':
                successful_runs.append(run)
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(successful_runs)} —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—É—Å–∫–æ–≤")
        
        if successful_runs:
            print(f"\nüìã –ê–ù–ê–õ–ò–ó –£–°–ü–ï–®–ù–´–• –ó–ê–ü–£–°–ö–û–í:")
            print("-" * 40)
            
            for i, run in enumerate(successful_runs[:5]):  # –ü–µ—Ä–≤—ã–µ 5
                print(f"\n{i+1}. üèÉ –ó–∞–ø—É—Å–∫ ID: {run.get('id', 'N/A')}")
                print(f"   üìÖ –î–∞—Ç–∞: {run.get('startedAt', 'N/A')}")
                print(f"   ‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {run.get('finishedAt', 'N/A')}")
                
                # –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                input_data = run.get('options', {}).get('input', {})
                if input_data:
                    print(f"   üìù –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
                    for key, value in input_data.items():
                        if isinstance(value, str) and len(value) > 100:
                            value = value[:100] + "..."
                        print(f"      {key}: {value}")
                
                # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
                dataset_id = run.get('defaultDatasetId')
                if dataset_id:
                    try:
                        dataset = client.dataset(dataset_id)
                        item_count = dataset.get().get('itemCount', 0)
                        print(f"   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {item_count}")
                        
                        # –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–∑–µ—Ü –¥–∞–Ω–Ω—ã—Ö
                        if item_count > 0:
                            items = dataset.list_items(limit=1).items
                            if items:
                                print(f"   üìã –û–±—Ä–∞–∑–µ—Ü –¥–∞–Ω–Ω—ã—Ö:")
                                sample = items[0]
                                if isinstance(sample, dict):
                                    for key, value in list(sample.items())[:5]:
                                        if isinstance(value, str) and len(value) > 50:
                                            value = value[:50] + "..."
                                        print(f"      {key}: {value}")
                    except Exception as e:
                        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        print(f"\nüìä –ê–ù–ê–õ–ò–ó –í–•–û–î–ù–´–• –î–ê–ù–ù–´–•:")
        print("-" * 30)
        
        all_input_keys = set()
        for run in successful_runs:
            input_data = run.get('options', {}).get('input', {})
            all_input_keys.update(input_data.keys())
        
        print(f"üîë –í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π: {len(all_input_keys)}")
        print(f"üìù –ü–æ–ª—è: {sorted(all_input_keys)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á–∞—Å—Ç–æ—Ç—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ–ª–µ–π
        field_usage = {}
        for run in successful_runs:
            input_data = run.get('options', {}).get('input', {})
            for key in input_data.keys():
                field_usage[key] = field_usage.get(key, 0) + 1
        
        print(f"\nüìà –ß–ê–°–¢–û–¢–ê –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –ü–û–õ–ï–ô:")
        for field, count in sorted(field_usage.items(), key=lambda x: x[1], reverse=True):
            print(f"   {field}: {count} —Ä–∞–∑")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–º–µ—Ä—ã –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        examples = []
        for run in successful_runs[:3]:
            input_data = run.get('options', {}).get('input', {})
            if input_data:
                examples.append({
                    'run_id': run.get('id'),
                    'started_at': run.get('startedAt'),
                    'input': input_data
                })
        
        with open('successful_runs_examples.json', 'w', encoding='utf-8') as f:
            json.dump(examples, f, indent=2, ensure_ascii=False)
        print(f"\nüíæ –ü—Ä–∏–º–µ—Ä—ã —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—É—Å–∫–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: successful_runs_examples.json")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    check_successful_runs()
