#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∞–∫—Ç–æ—Ä–æ–≤ Apify –∏ –∏—Ö –¥–∞–Ω–Ω—ã—Ö
"""

import os
from dotenv import load_dotenv
from apify_client import ApifyClient

load_dotenv()

def check_existing_actors():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∞–∫—Ç–æ—Ä–æ–≤ –∏ –∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
    
    api_token = os.getenv("APIFY_API_TOKEN")
    if not api_token:
        print("‚ùå APIFY_API_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
        return
    
    client = ApifyClient(api_token)
    
    print("üîç –ü–†–û–í–ï–†–ö–ê –°–£–©–ï–°–¢–í–£–Æ–©–ò–• –ê–ö–¢–û–†–û–í APIFY")
    print("=" * 60)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–æ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print("üìã –í–∞—à–∏ –∞–∫—Ç–æ—Ä—ã:")
        actors = client.actors().list()
        
        for actor in actors.items:
            print(f"   ‚Ä¢ {actor.get('name', 'N/A')} (ID: {actor.get('id', 'N/A')})")
            stats = actor.get('stats', {})
            print(f"     - –°—Ç–∞—Ç—É—Å: {stats.get('runs', 0)} –∑–∞–ø—É—Å–∫–æ–≤")
            print(f"     - –ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—É—Å–∫: {stats.get('lastRunStartedAt', 'N/A')}")
            print()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–ø—É—Å–∫–æ–≤
        print("üöÄ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø—É—Å–∫–∏:")
        runs = client.runs().list(limit=10)
        
        for run in runs.items:
            print(f"   ‚Ä¢ –ê–∫—Ç–æ—Ä: {run.get('actorId', 'N/A')}")
            print(f"     - –°—Ç–∞—Ç—É—Å: {run.get('status', 'N/A')}")
            print(f"     - –ó–∞–ø—É—â–µ–Ω: {run.get('startedAt', 'N/A')}")
            print(f"     - –ó–∞–≤–µ—Ä—à–µ–Ω: {run.get('finishedAt', 'N/A')}")
            print(f"     - ID –∑–∞–ø—É—Å–∫–∞: {run.get('id', 'N/A')}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ
            if run.get('status') == "SUCCEEDED":
                try:
                    dataset_id = run.get('defaultDatasetId')
                    if dataset_id:
                        dataset = client.dataset(dataset_id)
                        items = dataset.list_items(limit=5)
                        print(f"     - –î–∞–Ω–Ω—ã—Ö –≤ –¥–∞—Ç–∞—Å–µ—Ç–µ: {items.total} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                        
                        if items.items:
                            print(f"     - –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö:")
                            for i, item in enumerate(items.items[:2]):
                                print(f"       {i+1}. {list(item.keys())}")
                except Exception as e:
                    print(f"     - –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
            
            print()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞—Ç–∞—Å–µ—Ç—ã
        print("üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–æ–≤:")
        datasets = client.datasets().list(limit=10)
        
        for dataset in datasets.items:
            print(f"   ‚Ä¢ –î–∞—Ç–∞—Å–µ—Ç: {dataset.get('name', 'N/A')}")
            print(f"     - ID: {dataset.get('id', 'N/A')}")
            print(f"     - –≠–ª–µ–º–µ–Ω—Ç–æ–≤: {dataset.get('itemCount', 0)}")
            print(f"     - –°–æ–∑–¥–∞–Ω: {dataset.get('createdAt', 'N/A')}")
            
            if dataset.get('itemCount', 0) > 0:
                try:
                    dataset_client = client.dataset(dataset.get('id'))
                    items = dataset_client.list_items(limit=3)
                    print(f"     - –ü—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö:")
                    for i, item in enumerate(items.items):
                        print(f"       {i+1}. –ö–ª—é—á–∏: {list(item.keys())}")
                        if 'url' in item:
                            print(f"          URL: {item['url'][:50]}...")
                        if 'imageUrl' in item:
                            print(f"          Image: {item['imageUrl'][:50]}...")
                        if 'caption' in item:
                            print(f"          Caption: {item['caption'][:50]}...")
                except Exception as e:
                    print(f"     - –û—à–∏–±–∫–∞: {e}")
            
            print()
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    check_existing_actors()
