"""
Instagram Parser —á–µ—Ä–µ–∑ Apify —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ MongoDB
"""

import os
import json
import requests
import pymongo
from datetime import datetime
from pathlib import Path
import argparse
from typing import List, Dict, Optional
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()
load_dotenv('mongodb_config.env')

class InstagramParser:
    def __init__(self, apify_token: str, mongodb_uri: str = None):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞"""
        self.apify_token = apify_token
        self.mongodb_uri = mongodb_uri or os.getenv('MONGODB_URI', 'mongodb://trend_ai_user:LoGRomE2zJ0k0fuUhoTn@localhost:27017/instagram_gallery')
        self.client = None
        self.db = None
        self.collection = None
        
    def connect_mongodb(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB"""
        try:
            self.client = pymongo.MongoClient(self.mongodb_uri)
            self.db = self.client["instagram_gallery"]
            self.collection = self.db["images"]
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB: {e}")
            return False
    
    def parse_instagram_account(self, username: str, posts_limit: int = 100) -> Optional[Dict]:
        """–ü–∞—Ä—Å–∏–Ω–≥ Instagram –∞–∫–∫–∞—É–Ω—Ç–∞ —á–µ—Ä–µ–∑ Apify"""
        print(f"üîç –ü–∞—Ä—Å–∏–Ω–≥ –∞–∫–∫–∞—É–Ω—Ç–∞: @{username}")
        
        try:
            from apify_client import ApifyClient
            import time
            
            print("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Apify...")
            client = ApifyClient(self.apify_token)
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            
            # –ó–∞–ø—É—Å–∫ Instagram scraper
            run_input = {
                "directUrls": [f"https://www.instagram.com/{username}/"],
                "resultsType": "posts",
                "resultsLimit": posts_limit,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –ª–∏–º–∏—Ç
                "addParentData": False
            }
            
            print("üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—É—Å–∫–∞:")
            print(f"   ‚Ä¢ URL: {run_input['directUrls'][0]}")
            print(f"   ‚Ä¢ –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö: {run_input['resultsType']}")
            print(f"   ‚Ä¢ –õ–∏–º–∏—Ç: {run_input['resultsLimit']}")
            
            print("üöÄ –ó–∞–ø—É—Å–∫ Apify –∞–∫—Ç–æ—Ä–∞...")
            print("‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 30-60 —Å–µ–∫—É–Ω–¥...")
            
            start_time = time.time()
            run = client.actor("apify/instagram-scraper").call(run_input=run_input)
            elapsed_time = time.time() - start_time
            
            print(f"‚è±Ô∏è –ê–∫—Ç–æ—Ä –≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞ {elapsed_time:.1f} —Å–µ–∫—É–Ω–¥")
            
            if run and run.get("defaultDatasetId"):
                print("üì• –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –¥–∞—Ç–∞—Å–µ—Ç–∞...")
                dataset_id = run["defaultDatasetId"]
                print(f"   ‚Ä¢ ID –¥–∞—Ç–∞—Å–µ—Ç–∞: {dataset_id}")
                
                dataset_items = client.dataset(dataset_id).list_items().items
                
                print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(dataset_items)} –ø–æ—Å—Ç–æ–≤")
                return {
                    "username": username,
                    "posts": dataset_items,
                    "parsed_at": datetime.now().isoformat(),
                    "total_posts": len(dataset_items)
                }
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
                print(f"   ‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç run: {run}")
                return None
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
            import traceback
            print("üìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:")
            traceback.print_exc()
            return None
    
    def extract_image_urls(self, posts: List[Dict]) -> List[Dict]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å —É–¥–∞–ª–µ–Ω–∏–µ–º –¥—É–±–ª–∏–∫–∞—Ç–æ–≤"""
        print("üñºÔ∏è –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
        
        image_data = []
        seen_urls = set()
        
        for post in posts:
            if not isinstance(post, dict):
                continue
                
            post_info = {
                "post_id": post.get("shortCode", "N/A"),
                "username": post.get("ownerUsername", "N/A"),
                "timestamp": post.get("timestamp", "N/A"),
                "likes_count": post.get("likesCount", 0),
                "comments_count": post.get("commentsCount", 0),
                "caption": post.get("caption", "")[:200] + "..." if post.get("caption") else ""
            }
            
            # –û—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            if post.get("displayUrl"):
                url = post["displayUrl"]
                if url not in seen_urls:
                    seen_urls.add(url)
                    image_data.append({
                        **post_info,
                        "image_url": url,
                        "image_type": "main"
                    })
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if post.get("images"):
                for img_url in post["images"]:
                    if isinstance(img_url, str) and img_url not in seen_urls:
                        seen_urls.add(img_url)
                        image_data.append({
                            **post_info,
                            "image_url": img_url,
                            "image_type": "gallery"
                        })
            
            # Child posts (–∫–∞—Ä—É—Å–µ–ª–∏)
            if post.get("childPosts"):
                for child_post in post["childPosts"]:
                    if isinstance(child_post, dict):
                        if child_post.get("displayUrl"):
                            url = child_post["displayUrl"]
                            if url not in seen_urls:
                                seen_urls.add(url)
                                image_data.append({
                                    **post_info,
                                    "image_url": url,
                                    "image_type": "child"
                                })
        
        print(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(image_data)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        return image_data
    
    def download_images(self, image_data: List[Dict], max_images: int = 100) -> List[Dict]:
        """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        print(f"‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–º–∞–∫—Å–∏–º—É–º {max_images})...")
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        images_dir = Path("images")
        images_dir.mkdir(exist_ok=True)
        print(f"üìÅ –ü–∞–ø–∫–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {images_dir.absolute()}")
        
        downloaded_data = []
        downloaded_count = 0
        total_to_download = min(max_images, len(image_data))
        
        print(f"üìä –í—Å–µ–≥–æ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é: {total_to_download} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        
        for i, img_data in enumerate(image_data[:max_images]):
            try:
                url = img_data["image_url"]
                post_id = img_data["post_id"]
                img_type = img_data["image_type"]
                
                # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
                filename = f"{post_id}_{img_type}_{i+1:04d}.jpg"
                filepath = images_dir / filename
                
                print(f"üì• [{i+1}/{total_to_download}] –°–∫–∞—á–∏–≤–∞–Ω–∏–µ: {filename}")
                
                # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                response = requests.get(url, timeout=30)
                if response.status_code == 200:
                    with open(filepath, 'wb') as f:
                        f.write(response.content)
                    
                    file_size = filepath.stat().st_size
                    print(f"‚úÖ –°–∫–∞—á–∞–Ω–æ: {filename} ({file_size} –±–∞–π—Ç)")
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∫–∞—á–∞–Ω–Ω–æ–º —Ñ–∞–π–ª–µ
                    downloaded_data.append({
                        **img_data,
                        "local_filename": filename,
                        "local_path": str(filepath),
                        "file_size": file_size,
                        "downloaded_at": datetime.now().isoformat()
                    })
                    
                    downloaded_count += 1
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è {filename}: HTTP {response.status_code}")
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {i+1}: {e}")
        
        print(f"‚úÖ –°–∫–∞—á–∞–Ω–æ {downloaded_count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        return downloaded_data
    
    def save_to_mongodb(self, image_data: List[Dict], username: str):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ MongoDB"""
        print("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ MongoDB...")
        
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è MongoDB
            mongo_docs = []
            for img_data in image_data:
                doc = {
                    "instagram_url": f"https://www.instagram.com/{username}/",
                    "username": username,
                    "image_url": img_data["image_url"],
                    "post_id": img_data["post_id"],
                    "timestamp": img_data["timestamp"],
                    "likes_count": img_data["likes_count"],
                    "comments_count": img_data["comments_count"],
                    "caption": img_data["caption"],
                    "image_type": img_data["image_type"],
                    "parsed_at": datetime.now().isoformat()
                }
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ñ–∞–π–ª–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
                if "local_filename" in img_data:
                    # –ü–æ–ª–Ω—ã–π URL –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
                    full_image_url = f"http://89.169.176.64/images/{img_data['local_filename']}"
                    
                    doc.update({
                        "local_filename": img_data["local_filename"],
                        "local_path": img_data["local_path"],
                        "full_image_url": full_image_url,  # –ü–æ–ª–Ω—ã–π URL –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
                        "file_size": img_data["file_size"],
                        "downloaded_at": img_data["downloaded_at"]
                    })
                
                mongo_docs.append(doc)
            
            # –í—Å—Ç–∞–≤–ª—è–µ–º –≤ MongoDB
            if mongo_docs:
                result = self.collection.insert_many(mongo_docs)
                print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(result.inserted_ids)} –∑–∞–ø–∏—Å–µ–π –≤ MongoDB")
                
                # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
                self.collection.create_index("username")
                self.collection.create_index("image_url")
                self.collection.create_index("timestamp")
                print("‚úÖ –°–æ–∑–¥–∞–Ω—ã –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞")
            else:
                print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ MongoDB: {e}")
    
    def create_gallery_html(self, image_data: List[Dict], username: str):
        """–°–æ–∑–¥–∞–Ω–∏–µ HTML –≥–∞–ª–µ—Ä–µ–∏"""
        print("üåê –°–æ–∑–¥–∞–Ω–∏–µ HTML –≥–∞–ª–µ—Ä–µ–∏...")
        
        html_content = f"""
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@{username} - Instagram Gallery</title>
    <style>
        body {{
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 20px;
            background-color: #f5f5f5;
        }}
        .header {{
            text-align: center;
            margin-bottom: 30px;
            background: white;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }}
        .stats {{
            display: flex;
            justify-content: center;
            gap: 30px;
            margin: 20px 0;
        }}
        .stat {{
            text-align: center;
            padding: 10px;
            background: #e3f2fd;
            border-radius: 5px;
        }}
        .gallery {{
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
            gap: 20px;
        }}
        .image-card {{
            background: white;
            border-radius: 10px;
            overflow: hidden;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            transition: transform 0.3s ease;
        }}
        .image-card:hover {{
            transform: translateY(-5px);
        }}
        .image-card img {{
            width: 100%;
            height: 200px;
            object-fit: cover;
        }}
        .image-info {{
            padding: 15px;
        }}
        .post-id {{
            font-weight: bold;
            color: #1976d2;
        }}
        .likes {{
            color: #e91e63;
            font-size: 14px;
        }}
        .timestamp {{
            color: #666;
            font-size: 12px;
        }}
    </style>
</head>
<body>
    <div class="header">
        <h1>üñºÔ∏è @{username} - Instagram Gallery</h1>
        <div class="stats">
            <div class="stat">
                <h3>{len(image_data)}</h3>
                <p>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π</p>
            </div>
            <div class="stat">
                <h3>{datetime.now().strftime('%d.%m.%Y')}</h3>
                <p>–î–∞—Ç–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞</p>
            </div>
        </div>
    </div>
    
    <div class="gallery">
"""

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        for img_data in image_data:
            if "local_filename" in img_data:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–π URL –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
                img_src = f"http://89.169.176.64/images/{img_data['local_filename']}"
            else:
                img_src = img_data["image_url"]
                
            html_content += f"""
        <div class="image-card">
            <img src="{img_src}" alt="{img_data['post_id']}" loading="lazy">
            <div class="image-info">
                <div class="post-id">{img_data['post_id']}</div>
                <div class="likes">‚ù§Ô∏è {img_data['likes_count']}</div>
                <div class="timestamp">{img_data['timestamp'][:10] if img_data['timestamp'] != 'N/A' else 'N/A'}</div>
            </div>
        </div>
        """

        html_content += """
    </div>
</body>
</html>
        """
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML —Ñ–∞–π–ª
        with open(f"gallery_{username}.html", 'w', encoding='utf-8') as f:
            f.write(html_content)
        
        print(f"üåê HTML –≥–∞–ª–µ—Ä–µ—è —Å–æ–∑–¥–∞–Ω–∞: gallery_{username}.html")
    
    def run_full_parsing(self, username: str, max_images: int = 100, posts_limit: int = 100):
        """–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        print(f"üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –ü–ê–†–°–ò–ù–ì–ê –î–õ–Ø @{username}")
        print("="*60)
        print(f"üìä –õ–∏–º–∏—Ç –ø–æ—Å—Ç–æ–≤: {posts_limit}")
        print(f"üì• –ú–∞–∫—Å. –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {max_images}")
        
        # 1. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
        if not self.connect_mongodb():
            return False
        
        # 2. –ü–∞—Ä—Å–∏–Ω–≥ Instagram
        parsed_data = self.parse_instagram_account(username, posts_limit)
        if not parsed_data:
            return False
        
        # 3. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        image_data = self.extract_image_urls(parsed_data["posts"])
        if not image_data:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
            return False
        
        # 4. –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        downloaded_data = self.download_images(image_data, max_images)
        
        # 5. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ MongoDB
        self.save_to_mongodb(downloaded_data, username)
        
        # 6. –°–æ–∑–¥–∞–Ω–∏–µ HTML –≥–∞–ª–µ—Ä–µ–∏
        self.create_gallery_html(downloaded_data, username)
        
        print(f"\nüéâ –ü–ê–†–°–ò–ù–ì –ó–ê–í–ï–†–®–ï–ù!")
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   ‚Ä¢ –ê–∫–∫–∞—É–Ω—Ç: @{username}")
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: {parsed_data['total_posts']}")
        print(f"   ‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(image_data)}")
        print(f"   ‚Ä¢ –°–∫–∞—á–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(downloaded_data)}")
        print(f"   ‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ MongoDB: {len(downloaded_data)}")
        print(f"   ‚Ä¢ HTML –≥–∞–ª–µ—Ä–µ—è: gallery_{username}.html")
        
        return True

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    parser = argparse.ArgumentParser(description="Instagram Parser —á–µ—Ä–µ–∑ Apify")
    parser.add_argument("username", help="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Instagram (–±–µ–∑ @)")
    parser.add_argument("--max-images", type=int, default=100, help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è")
    parser.add_argument("--mongodb-uri", default="mongodb://localhost:27017/", help="URI MongoDB")
    
    args = parser.parse_args()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω Apify –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    apify_token = os.getenv("APIFY_API_TOKEN")
    if not apify_token:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω APIFY_API_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–æ–∫–µ–Ω: export APIFY_API_TOKEN=your_token")
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä –∏ –∑–∞–ø—É—Å–∫–∞–µ–º
    parser_instance = InstagramParser(apify_token, args.mongodb_uri)
    success = parser_instance.run_full_parsing(args.username, args.max_images)
    
    if success:
        print(f"\n‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ @{args.username} –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    else:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ @{args.username}")

if __name__ == "__main__":
    main()
