"""
Instagram Parser —á–µ—Ä–µ–∑ Apify —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ MongoDB
"""

import os
import json
import requests
import pymongo
import imagehash
from PIL import Image
from io import BytesIO
from datetime import datetime
from pathlib import Path
import argparse
from typing import List, Dict, Optional
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()
load_dotenv('mongodb_config.env')

class InstagramParser:
    def __init__(self, apify_token: str, mongodb_uri: str = None):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞"""
        self.apify_token = apify_token
        self.mongodb_uri = mongodb_uri or os.getenv('MONGODB_URI', 'mongodb://trend_ai_user:LoGRomE2zJ0k0fuUhoTn@localhost:27017/instagram_gallery')
        self.client = None
        self.db = None
        self.collection = None
        
    def connect_mongodb(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB"""
        try:
            self.client = pymongo.MongoClient(self.mongodb_uri)
            self.db = self.client["instagram_gallery"]
            self.collection = self.db["images"]
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB: {e}")
            return False
    
    def calculate_perceptual_hash(self, image_data: bytes) -> str:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ perceptual hash –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        
        Args:
            image_data: –ë–∞–π—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            
        Returns:
            –°—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ perceptual hash
        """
        try:
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –±–∞–π—Ç–æ–≤
            image = Image.open(BytesIO(image_data))
            
            # –í—ã—á–∏—Å–ª—è–µ–º perceptual hash (pHash)
            # pHash –±–æ–ª–µ–µ —É—Å—Ç–æ–π—á–∏–≤ –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º, —á–µ–º average hash
            phash = imagehash.phash(image, hash_size=8)
            
            return str(phash)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è perceptual hash: {e}")
            return None
    
    def is_duplicate_by_hash(self, image_hash: str, threshold: int = 5) -> Optional[Dict]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ perceptual hash
        
        Args:
            image_hash: Perceptual hash –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            threshold: –ü–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∞–∑–ª–∏—á–∏—è (Hamming distance)
                      0 = —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                      5 = –¥–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–±–æ–ª—å—à–∏–µ —Ä–∞–∑–ª–∏—á–∏—è (—Å–∂–∞—Ç–∏–µ, —Ñ–∏–ª—å—Ç—Ä—ã)
                      10 = –±–æ–ª–µ–µ –º—è–≥–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            
        Returns:
            –î–æ–∫—É–º–µ–Ω—Ç –¥—É–±–ª–∏–∫–∞—Ç–∞ –∏–∑ –ë–î –∏–ª–∏ None
        """
        try:
            if not image_hash:
                return None
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ö–µ—à–∏ –∏–∑ –ë–î
            existing_hashes = self.collection.find(
                {"image_hash": {"$exists": True}},
                {"image_hash": 1, "image_url": 1, "post_id": 1, "_id": 1}
            )
            
            current_hash = imagehash.hex_to_hash(image_hash)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Ö–µ—à –Ω–∞ –ø–æ—Ö–æ–∂–µ—Å—Ç—å
            for doc in existing_hashes:
                try:
                    existing_hash = imagehash.hex_to_hash(doc["image_hash"])
                    # –í—ã—á–∏—Å–ª—è–µ–º Hamming distance (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑–ª–∏—á–∞—é—â–∏—Ö—Å—è –±–∏—Ç–æ–≤)
                    distance = current_hash - existing_hash
                    
                    if distance <= threshold:
                        print(f"üîç –ù–∞–π–¥–µ–Ω –¥—É–±–ª–∏–∫–∞—Ç! Hamming distance: {distance}")
                        print(f"   –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π: {doc.get('post_id', 'N/A')}")
                        return doc
                except Exception as e:
                    continue
            
            return None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ —Ö–µ—à—É: {e}")
            return None
    
    def parse_instagram_account(self, username: str, posts_limit: int = 100, date_from: str = None) -> Optional[Dict]:
        """–ü–∞—Ä—Å–∏–Ω–≥ Instagram –∞–∫–∫–∞—É–Ω—Ç–∞ —á–µ—Ä–µ–∑ Apify
        
        Args:
            username: –∏–º—è –∞–∫–∫–∞—É–Ω—Ç–∞ Instagram
            posts_limit: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤
            date_from: –¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
                      –ü–∞—Ä—Å–∏—Ç –≤—Å–µ –ø–æ—Å—Ç—ã —Å —ç—Ç–æ–π –¥–∞—Ç—ã –¥–æ —Å–µ–≥–æ–¥–Ω—è
        """
        print(f"\n{'='*60}")
        print(f"üîç [PARSER] –ü–∞—Ä—Å–∏–Ω–≥ –∞–∫–∫–∞—É–Ω—Ç–∞: @{username}")
        print(f"üìä [PARSER] –õ–∏–º–∏—Ç –ø–æ—Å—Ç–æ–≤: {posts_limit}")
        print(f"üìÖ [PARSER] –° –¥–∞—Ç—ã: {date_from} –¥–æ —Å–µ–≥–æ–¥–Ω—è")
        print(f"{'='*60}")
        
        try:
            from apify_client import ApifyClient
            import time
            
            print("üîó [PARSER] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Apify...")
            client = ApifyClient(self.apify_token)
            print("‚úÖ [PARSER] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Apify —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            
            # –ó–∞–ø—É—Å–∫ Instagram scraper
            run_input = {
                "directUrls": [f"https://www.instagram.com/{username}/"],
                "resultsType": "posts",
                "resultsLimit": posts_limit,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –ª–∏–º–∏—Ç
                "addParentData": False
            }
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º onlyPostsNewerThan –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –¥–∞—Ç–µ
            # –≠—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥ –∫–æ–≥–¥–∞ –¥–æ—Å—Ç–∏–≥–∞–µ—Ç—Å—è —É–∫–∞–∑–∞–Ω–Ω–∞—è –¥–∞—Ç–∞
            if date_from:
                run_input["onlyPostsNewerThan"] = date_from
                print(f"   ‚Ä¢ [PARSER] –ü–∞—Ä—Å–∏—Ç—å –ø–æ—Å—Ç—ã –Ω–æ–≤–µ–µ —á–µ–º: {date_from}")
            
            print("üìã [PARSER] –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—É—Å–∫–∞ Apify:")
            print(f"   ‚Ä¢ URL: {run_input['directUrls'][0]}")
            print(f"   ‚Ä¢ –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö: {run_input['resultsType']}")
            print(f"   ‚Ä¢ –õ–∏–º–∏—Ç: {run_input['resultsLimit']}")
            if date_from:
                print(f"   ‚Ä¢ onlyPostsNewerThan: {run_input['onlyPostsNewerThan']}")
            
            print("üöÄ [PARSER] –ó–∞–ø—É—Å–∫ Apify –∞–∫—Ç–æ—Ä–∞...")
            print(f"‚ö†Ô∏è [PARSER] –í–Ω–∏–º–∞–Ω–∏–µ: —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ –¥–∞—Ç–∞–º —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 2-5 –º–∏–Ω—É—Ç...")
            print(f"üîë [PARSER] –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–∫–µ–Ω: {self.apify_token[:10]}...{self.apify_token[-4:]}")
            
            start_time = time.time()
            print(f"‚è∞ [PARSER] –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {datetime.now().strftime('%H:%M:%S')}")
            
            # –í–ê–ñ–ù–û: –í—ã–∑–æ–≤ –∞–∫—Ç–æ—Ä–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –±–æ–ª—å—à–∏–º –ª–∏–º–∏—Ç–æ–º
            print(f"‚è≥ [PARSER] –í—ã–∑–æ–≤ –∞–∫—Ç–æ—Ä–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º 600 —Å–µ–∫—É–Ω–¥ (10 –º–∏–Ω—É—Ç)...")
            run = client.actor("apify/instagram-scraper").call(
                run_input=run_input,
                timeout_secs=600  # –¢–∞–π–º–∞—É—Ç 10 –º–∏–Ω—É—Ç
            )
            
            elapsed_time = time.time() - start_time
            print(f"‚è±Ô∏è [PARSER] –ê–∫—Ç–æ—Ä –≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞ {elapsed_time:.1f} —Å–µ–∫—É–Ω–¥")
            print(f"üì¶ [PARSER] –†–µ–∑—É–ª—å—Ç–∞—Ç run: {run}")
            
            if run and run.get("defaultDatasetId"):
                print("üì• [PARSER] –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –¥–∞—Ç–∞—Å–µ—Ç–∞...")
                dataset_id = run["defaultDatasetId"]
                print(f"   ‚Ä¢ [PARSER] ID –¥–∞—Ç–∞—Å–µ—Ç–∞: {dataset_id}")
                
                dataset_items = client.dataset(dataset_id).list_items().items
                
                print(f"‚úÖ [PARSER] –ü–æ–ª—É—á–µ–Ω–æ {len(dataset_items)} –ø–æ—Å—Ç–æ–≤")
                print(f"{'='*60}\n")
                return {
                    "username": username,
                    "posts": dataset_items,
                    "parsed_at": datetime.now().isoformat(),
                    "total_posts": len(dataset_items)
                }
            else:
                print("‚ùå [PARSER] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
                print(f"   ‚Ä¢ [PARSER] –†–µ–∑—É–ª—å—Ç–∞—Ç run: {run}")
                print(f"{'='*60}\n")
                return None
                
        except Exception as e:
            print(f"‚ùå [PARSER] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
            import traceback
            print("üìã [PARSER] –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:")
            traceback.print_exc()
            print(f"{'='*60}\n")
            return None
    
    def extract_image_urls(self, posts: List[Dict]) -> List[Dict]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å —É–¥–∞–ª–µ–Ω–∏–µ–º –¥—É–±–ª–∏–∫–∞—Ç–æ–≤"""
        print("üñºÔ∏è –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
        
        image_data = []
        seen_urls = set()
        
        for post in posts:
            if not isinstance(post, dict):
                continue
                
            post_info = {
                "post_id": post.get("shortCode", "N/A"),
                "username": post.get("ownerUsername", "N/A"),
                "timestamp": post.get("timestamp", "N/A"),
                "likes_count": post.get("likesCount", 0),
                "comments_count": post.get("commentsCount", 0),
                "caption": post.get("caption", "")[:200] + "..." if post.get("caption") else ""
            }
            
            # –û—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            if post.get("displayUrl"):
                url = post["displayUrl"]
                if url not in seen_urls:
                    seen_urls.add(url)
                    image_data.append({
                        **post_info,
                        "image_url": url,
                        "image_type": "main"
                    })
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if post.get("images"):
                for img_url in post["images"]:
                    if isinstance(img_url, str) and img_url not in seen_urls:
                        seen_urls.add(img_url)
                        image_data.append({
                            **post_info,
                            "image_url": img_url,
                            "image_type": "gallery"
                        })
            
            # Child posts (–∫–∞—Ä—É—Å–µ–ª–∏)
            if post.get("childPosts"):
                for child_post in post["childPosts"]:
                    if isinstance(child_post, dict):
                        if child_post.get("displayUrl"):
                            url = child_post["displayUrl"]
                            if url not in seen_urls:
                                seen_urls.add(url)
                                image_data.append({
                                    **post_info,
                                    "image_url": url,
                                    "image_type": "child"
                                })
        
        print(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(image_data)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        return image_data
    
    def download_images(self, image_data: List[Dict], max_images: int = 100) -> List[Dict]:
        """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥—É–±–ª–∏–∫–∞—Ç–æ–≤"""
        print(f"‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–º–∞–∫—Å–∏–º—É–º {max_images})...")
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        images_dir = Path("images")
        images_dir.mkdir(exist_ok=True)
        print(f"üìÅ –ü–∞–ø–∫–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {images_dir.absolute()}")
        
        downloaded_data = []
        downloaded_count = 0
        skipped_count = 0
        total_to_download = min(max_images, len(image_data))
        
        print(f"üìä –í—Å–µ–≥–æ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é: {total_to_download} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        
        for i, img_data in enumerate(image_data[:max_images]):
            try:
                url = img_data["image_url"]
                post_id = img_data["post_id"]
                img_type = img_data["image_type"]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —ç—Ç–∏–º post_id –≤ –ë–î
                if self.is_image_exists(url, post_id):
                    print(f"‚è≠Ô∏è [{i+1}/{total_to_download}] –ü—Ä–æ–ø—É—Å–∫ –¥—É–±–ª–∏–∫–∞—Ç–∞ –ø–æ post_id: {post_id}")
                    skipped_count += 1
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–∫–∞—á–∏–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –ø–æ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Ñ–∞–π–ª—É)
                filename = f"{post_id}_{img_type}_{i+1:04d}.jpg"
                filepath = images_dir / filename
                
                if filepath.exists():
                    print(f"‚è≠Ô∏è [{i+1}/{total_to_download}] –§–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {filename}")
                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º —Ñ–∞–π–ª–µ
                    downloaded_data.append({
                        **img_data,
                        "local_filename": filename,
                        "local_path": str(filepath),
                        "file_size": filepath.stat().st_size,
                        "downloaded_at": datetime.now().isoformat()
                    })
                    skipped_count += 1
                    continue
                
                
                print(f"üì• [{i+1}/{total_to_download}] –°–∫–∞—á–∏–≤–∞–Ω–∏–µ: {filename}")
                
                # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                response = requests.get(url, timeout=30)
                if response.status_code == 200:
                    image_content = response.content
                    
                    # –í—ã—á–∏—Å–ª—è–µ–º perceptual hash
                    print(f"üî¢ –í—ã—á–∏—Å–ª–µ–Ω–∏–µ perceptual hash...")
                    image_hash = self.calculate_perceptual_hash(image_content)
                    
                    if image_hash:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ perceptual hash
                        duplicate = self.is_duplicate_by_hash(image_hash, threshold=5)
                        
                        if duplicate:
                            print(f"‚è≠Ô∏è [{i+1}/{total_to_download}] –ù–∞–π–¥–µ–Ω –≤–∏–∑—É–∞–ª—å–Ω—ã–π –¥—É–±–ª–∏–∫–∞—Ç!")
                            print(f"   –û—Ä–∏–≥–∏–Ω–∞–ª: {duplicate.get('post_id', 'N/A')}")
                            print(f"   –¢–µ–∫—É—â–∏–π: {post_id}")
                            skipped_count += 1
                            continue
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
                    with open(filepath, 'wb') as f:
                        f.write(image_content)
                    
                    file_size = filepath.stat().st_size
                    print(f"‚úÖ –°–∫–∞—á–∞–Ω–æ: {filename} ({file_size} –±–∞–π—Ç)")
                    if image_hash:
                        print(f"   Hash: {image_hash}")
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∫–∞—á–∞–Ω–Ω–æ–º —Ñ–∞–π–ª–µ
                    downloaded_data.append({
                        **img_data,
                        "local_filename": filename,
                        "local_path": str(filepath),
                        "file_size": file_size,
                        "downloaded_at": datetime.now().isoformat(),
                        "image_hash": image_hash  # –î–æ–±–∞–≤–ª—è–µ–º perceptual hash
                    })
                    
                    downloaded_count += 1
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è {filename}: HTTP {response.status_code}")
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {i+1}: {e}")
        
        print(f"‚úÖ –°–∫–∞—á–∞–Ω–æ {downloaded_count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        print(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ {skipped_count} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤")
        return downloaded_data
    
    def is_image_exists(self, image_url: str, post_id: str = None) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ MongoDB"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if self.collection.find_one({"image_url": image_url}):
                return True
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ post_id, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
            if post_id and self.collection.find_one({"post_id": post_id}):
                return True
                
            return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {e}")
            return False

    def get_existing_images(self, image_urls: List[str], post_ids: List[str] = None) -> set:
        """–ú–∞—Å—Å–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        try:
            existing_urls = set()
            existing_posts = set()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            if image_urls:
                cursor = self.collection.find(
                    {"image_url": {"$in": image_urls}}, 
                    {"image_url": 1, "_id": 0}
                )
                existing_urls = {doc["image_url"] for doc in cursor}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ post_id, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã
            if post_ids:
                cursor = self.collection.find(
                    {"post_id": {"$in": post_ids}}, 
                    {"post_id": 1, "_id": 0}
                )
                existing_posts = {doc["post_id"] for doc in cursor}
            
            return existing_urls, existing_posts
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {e}")
            return set(), set()

    def save_to_mongodb(self, image_data: List[Dict], username: str):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ MongoDB —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥—É–±–ª–∏–∫–∞—Ç–æ–≤"""
        print("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ MongoDB...")
        
        try:
            # –ú–∞—Å—Å–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            image_urls = [img_data["image_url"] for img_data in image_data]
            post_ids = [img_data["post_id"] for img_data in image_data]
            existing_urls, existing_posts = self.get_existing_images(image_urls, post_ids)
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è MongoDB —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
            mongo_docs = []
            skipped_count = 0
            
            for img_data in image_data:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                if (img_data["image_url"] in existing_urls or 
                    img_data["post_id"] in existing_posts):
                    print(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫ –¥—É–±–ª–∏–∫–∞—Ç–∞: {img_data['image_url']}")
                    skipped_count += 1
                    continue
                
                doc = {
                    "instagram_url": f"https://www.instagram.com/{username}/",
                    "username": username,
                    "image_url": img_data["image_url"],
                    "post_id": img_data["post_id"],
                    "timestamp": img_data["timestamp"],
                    "likes_count": img_data["likes_count"],
                    "comments_count": img_data["comments_count"],
                    "caption": img_data["caption"],
                    "image_type": img_data["image_type"],
                    "parsed_at": datetime.now().isoformat(),
                    "selected_for_tagging": False,
                    "selected_at": None
                }
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ñ–∞–π–ª–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
                if "local_filename" in img_data:
                    # –ü–æ–ª–Ω—ã–π URL –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
                    full_image_url = f"http://158.160.19.119:5000/images/{img_data['local_filename']}"
                    
                    doc.update({
                        "local_filename": img_data["local_filename"],
                        "local_path": img_data["local_path"],
                        "full_image_url": full_image_url,  # –ü–æ–ª–Ω—ã–π URL –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
                        "file_size": img_data["file_size"],
                        "downloaded_at": img_data["downloaded_at"]
                    })
                
                # –î–æ–±–∞–≤–ª—è–µ–º perceptual hash, –µ—Å–ª–∏ –µ—Å—Ç—å
                if "image_hash" in img_data and img_data["image_hash"]:
                    doc["image_hash"] = img_data["image_hash"]
                
                mongo_docs.append(doc)
            
            # –í—Å—Ç–∞–≤–ª—è–µ–º –≤ MongoDB
            if mongo_docs:
                result = self.collection.insert_many(mongo_docs)
                print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(result.inserted_ids)} –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π –≤ MongoDB")
                
                # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
                self.collection.create_index("username")
                self.collection.create_index("image_url")
                self.collection.create_index("timestamp")
                self.collection.create_index("selected_for_tagging")
                self.collection.create_index("image_hash")  # –ò–Ω–¥–µ–∫—Å –¥–ª—è perceptual hash
                print("‚úÖ –°–æ–∑–¥–∞–Ω—ã –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞")
            else:
                print("‚ùå –ù–µ—Ç –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            
            # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            total_processed = len(image_data)
            new_saved = len(mongo_docs)
            print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {total_processed}, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {new_saved}, –ø—Ä–æ–ø—É—â–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ {skipped_count}")
            
            return new_saved
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ MongoDB: {e}")
    
    def create_gallery_html(self, image_data: List[Dict], username: str):
        """–°–æ–∑–¥–∞–Ω–∏–µ HTML –≥–∞–ª–µ—Ä–µ–∏ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏"""
        print("üåê –°–æ–∑–¥–∞–Ω–∏–µ HTML –≥–∞–ª–µ—Ä–µ–∏ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏...")
        
        # –ß–∏—Ç–∞–µ–º —à–∞–±–ª–æ–Ω
        template_path = "templates/gallery_template.html"
        try:
            with open(template_path, 'r', encoding='utf-8') as f:
                template = f.read()
        except FileNotFoundError:
            print(f"‚ùå –®–∞–±–ª–æ–Ω {template_path} –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π")
            return self._create_simple_gallery_html(image_data, username)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –≥–∞–ª–µ—Ä–µ–∏
        gallery_content = ""
        for img_data in image_data:
            if "local_filename" in img_data:
                img_src = f"http://158.160.19.119:5000/images/{img_data['local_filename']}"
            else:
                img_src = img_data["image_url"]
                
            gallery_content += f"""
        <div class="image-card" data-post-id="{img_data['post_id']}">
            <img src="{img_src}" alt="{img_data['post_id']}" loading="lazy">
            <div class="image-info">
                <div class="post-id">{img_data['post_id']}</div>
                <div class="likes">‚ù§Ô∏è {img_data['likes_count']}</div>
                <div class="timestamp">{img_data['timestamp'][:10] if img_data['timestamp'] != 'N/A' else 'N/A'}</div>
                <div class="object-tags">
                    <!-- –ó–¥–µ—Å—å –±—É–¥—É—Ç —Ç–µ–≥–∏ –æ–±—ä–µ–∫—Ç–æ–≤, –∫–æ–≥–¥–∞ –æ–Ω–∏ –ø–æ—è–≤—è—Ç—Å—è -->
                </div>
            </div>
        </div>
        """
        
        # –ó–∞–º–µ–Ω—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –≤ —à–∞–±–ª–æ–Ω–µ
        html_content = template.replace("{username}", username)
        html_content = html_content.replace("{total_images}", str(len(image_data)))
        html_content = html_content.replace("{parsing_date}", datetime.now().strftime('%d.%m.%Y'))
        html_content = html_content.replace("{gallery_content}", gallery_content)
        html_content = html_content.replace("{image_data_json}", json.dumps(image_data, ensure_ascii=False))
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML —Ñ–∞–π–ª
        with open(f"gallery_{username}.html", 'w', encoding='utf-8') as f:
            f.write(html_content)
        
        print(f"üåê HTML –≥–∞–ª–µ—Ä–µ—è —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ —Å–æ–∑–¥–∞–Ω–∞: gallery_{username}.html")
        return html_content

    def _create_simple_gallery_html(self, image_data: List[Dict], username: str):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–π HTML –≥–∞–ª–µ—Ä–µ–∏ (fallback)"""
        print("üåê –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–π HTML –≥–∞–ª–µ—Ä–µ–∏...")
        
        html_content = f"""
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@{username} - Instagram Gallery</title>
    <style>
        body {{
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 20px;
            background-color: #f5f5f5;
        }}
        .header {{
            text-align: center;
            margin-bottom: 30px;
            background: white;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }}
        .gallery {{
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
            gap: 20px;
        }}
        .image-card {{
            background: white;
            border-radius: 10px;
            overflow: hidden;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            transition: transform 0.3s ease;
        }}
        .image-card:hover {{
            transform: translateY(-5px);
        }}
        .image-card img {{
            width: 100%;
            height: 200px;
            object-fit: cover;
        }}
        .image-info {{
            padding: 15px;
        }}
    </style>
</head>
<body>
    <div class="header">
        <h1>üñºÔ∏è @{username} - Instagram Gallery</h1>
        <p>{len(image_data)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π</p>
    </div>
    <div class="gallery">
"""
        
        for img_data in image_data:
            if "local_filename" in img_data:
                img_src = f"http://158.160.19.119:5000/images/{img_data['local_filename']}"
            else:
                img_src = img_data["image_url"]
                
            html_content += f"""
        <div class="image-card">
            <img src="{img_src}" alt="{img_data['post_id']}" loading="lazy">
            <div class="image-info">
                <div>{img_data['post_id']}</div>
                <div>‚ù§Ô∏è {img_data['likes_count']}</div>
            </div>
        </div>
        """
        
        html_content += """
    </div>
</body>
</html>
        """
        
        with open(f"gallery_{username}.html", 'w', encoding='utf-8') as f:
            f.write(html_content)
        
        print(f"üåê –ü—Ä–æ—Å—Ç–∞—è HTML –≥–∞–ª–µ—Ä–µ—è —Å–æ–∑–¥–∞–Ω–∞: gallery_{username}.html")
        return html_content

    def create_combined_gallery_html(self, page: int = 1, per_page: int = 200):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—â–µ–π –≥–∞–ª–µ—Ä–µ–∏ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
        print(f"üåê –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—â–µ–π –≥–∞–ª–µ—Ä–µ–∏ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page})...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ MongoDB —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
            skip = (page - 1) * per_page
            images_cursor = self.collection.find().sort("parsed_at", -1).skip(skip).limit(per_page)
            images = list(images_cursor)
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            total_images = self.collection.count_documents({})
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            accounts = self.collection.distinct("username")
            
            if not images:
                print("‚ùå –ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥–∞–ª–µ—Ä–µ–∏")
                return None
            
            # –ß–∏—Ç–∞–µ–º —à–∞–±–ª–æ–Ω –æ–±—â–µ–π –≥–∞–ª–µ—Ä–µ–∏
            template_path = "templates/combined_gallery_template.html"
            try:
                with open(template_path, 'r', encoding='utf-8') as f:
                    template = f.read()
            except FileNotFoundError:
                print(f"‚ùå –®–∞–±–ª–æ–Ω {template_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return None
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –≥–∞–ª–µ—Ä–µ–∏
            gallery_content = ""
            for img_data in images:
                if "local_filename" in img_data:
                    img_src = f"http://158.160.19.119:5000/images/{img_data['local_filename']}"
                else:
                    img_src = img_data["image_url"]
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤—ã–±–æ—Ä–∞
                selected_class = "selected" if img_data.get("selected_for_tagging", False) else ""
                checked_attr = "checked" if img_data.get("selected_for_tagging", False) else ""
                
                gallery_content += f"""
        <div class="image-card {selected_class}" data-post-id="{img_data['post_id']}" data-image-id="{img_data['_id']}">
            <div class="image-checkbox">
                <input type="checkbox" class="image-select" {checked_attr} data-image-id="{img_data['_id']}">
            </div>
            <img src="{img_src}" alt="{img_data['post_id']}" loading="lazy">
            <div class="image-info">
                <div class="post-id">{img_data['post_id']}</div>
                <div class="username">@{img_data['username']}</div>
                <div class="likes">‚ù§Ô∏è {img_data['likes_count']}</div>
                <div class="timestamp">{img_data['timestamp'][:10] if img_data['timestamp'] != 'N/A' else 'N/A'}</div>
                <div class="object-tags">
                    <!-- –ó–¥–µ—Å—å –±—É–¥—É—Ç —Ç–µ–≥–∏ –æ–±—ä–µ–∫—Ç–æ–≤, –∫–æ–≥–¥–∞ –æ–Ω–∏ –ø–æ—è–≤—è—Ç—Å—è -->
                </div>
            </div>
        </div>
        """
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
            total_pages = (total_images + per_page - 1) // per_page
            pagination_html = self._generate_pagination_html(page, total_pages)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–ø—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞
            account_options = ""
            for account in accounts:
                account_options += f'<option value="{account}">@{account}</option>\n                    '
            
            # –ó–∞–º–µ–Ω—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –≤ —à–∞–±–ª–æ–Ω–µ
            html_content = template.replace("{total_images}", str(total_images))
            html_content = html_content.replace("{current_page}", str(page))
            html_content = html_content.replace("{total_pages}", str(total_pages))
            html_content = html_content.replace("{per_page}", str(per_page))
            html_content = html_content.replace("{gallery_content}", gallery_content)
            html_content = html_content.replace("{pagination_html}", pagination_html)
            html_content = html_content.replace("{accounts_json}", json.dumps(accounts, ensure_ascii=False))
            html_content = html_content.replace("{account_options}", account_options)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML —Ñ–∞–π–ª
            filename = f"all_accounts_gallery_page_{page}.html" if page > 1 else "all_accounts_gallery.html"
            with open(filename, 'w', encoding='utf-8') as f:
                f.write(html_content)
            
            print(f"üåê –û–±—â–∞—è –≥–∞–ª–µ—Ä–µ—è —Å–æ–∑–¥–∞–Ω–∞: {filename}")
            return html_content
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—â–µ–π –≥–∞–ª–µ—Ä–µ–∏: {e}")
            return None

    def _generate_pagination_html(self, current_page: int, total_pages: int):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"""
        if total_pages <= 1:
            return ""
        
        pagination_html = '<div class="pagination">'
        
        # –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        if current_page > 1:
            prev_page = current_page - 1
            filename = f"all_accounts_gallery_page_{prev_page}.html" if prev_page > 1 else "all_accounts_gallery.html"
            pagination_html += f'<a href="{filename}" class="page-btn prev">‚Üê –ü—Ä–µ–¥—ã–¥—É—â–∞—è</a>'
        
        # –ù–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
        start_page = max(1, current_page - 2)
        end_page = min(total_pages, current_page + 2)
        
        for page_num in range(start_page, end_page + 1):
            if page_num == current_page:
                pagination_html += f'<span class="page-btn current">{page_num}</span>'
            else:
                filename = f"all_accounts_gallery_page_{page_num}.html" if page_num > 1 else "all_accounts_gallery.html"
                pagination_html += f'<a href="{filename}" class="page-btn">{page_num}</a>'
        
        # –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        if current_page < total_pages:
            next_page = current_page + 1
            filename = f"all_accounts_gallery_page_{next_page}.html"
            pagination_html += f'<a href="{filename}" class="page-btn next">–°–ª–µ–¥—É—é—â–∞—è ‚Üí</a>'
        
        pagination_html += '</div>'
        return pagination_html
    
    def run_full_parsing(self, username: str, max_images: int = 100, posts_limit: int = 100):
        """–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        print(f"üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –ü–ê–†–°–ò–ù–ì–ê –î–õ–Ø @{username}")
        print("="*60)
        print(f"üìä –õ–∏–º–∏—Ç –ø–æ—Å—Ç–æ–≤: {posts_limit}")
        print(f"üì• –ú–∞–∫—Å. –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {max_images}")
        
        # 1. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
        if not self.connect_mongodb():
            return False
        
        # 2. –ü–∞—Ä—Å–∏–Ω–≥ Instagram
        parsed_data = self.parse_instagram_account(username, posts_limit)
        if not parsed_data:
            return False
        
        # 3. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        image_data = self.extract_image_urls(parsed_data["posts"])
        if not image_data:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
            return False
        
        # 4. –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        downloaded_data = self.download_images(image_data, max_images)
        
        # 5. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ MongoDB
        self.save_to_mongodb(downloaded_data, username)
        
        # 6. –°–æ–∑–¥–∞–Ω–∏–µ HTML –≥–∞–ª–µ—Ä–µ–∏
        self.create_gallery_html(downloaded_data, username)
        
        print(f"\nüéâ –ü–ê–†–°–ò–ù–ì –ó–ê–í–ï–†–®–ï–ù!")
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   ‚Ä¢ –ê–∫–∫–∞—É–Ω—Ç: @{username}")
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: {parsed_data['total_posts']}")
        print(f"   ‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(image_data)}")
        print(f"   ‚Ä¢ –°–∫–∞—á–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(downloaded_data)}")
        print(f"   ‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ MongoDB: {len(downloaded_data)}")
        print(f"   ‚Ä¢ HTML –≥–∞–ª–µ—Ä–µ—è: gallery_{username}.html")
        
        return True

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    parser = argparse.ArgumentParser(description="Instagram Parser —á–µ—Ä–µ–∑ Apify")
    parser.add_argument("username", help="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Instagram (–±–µ–∑ @)")
    parser.add_argument("--max-images", type=int, default=100, help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è")
    parser.add_argument("--mongodb-uri", default="mongodb://localhost:27017/", help="URI MongoDB")
    
    args = parser.parse_args()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω Apify –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    apify_token = os.getenv("APIFY_API_TOKEN")
    if not apify_token:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω APIFY_API_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–æ–∫–µ–Ω: export APIFY_API_TOKEN=your_token")
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä –∏ –∑–∞–ø—É—Å–∫–∞–µ–º
    parser_instance = InstagramParser(apify_token, args.mongodb_uri)
    success = parser_instance.run_full_parsing(args.username, args.max_images)
    
    if success:
        print(f"\n‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ @{args.username} –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    else:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ @{args.username}")

if __name__ == "__main__":
    main()
