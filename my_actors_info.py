"""
–ê–Ω–∞–ª–∏–∑ –≤–∞—à–∏—Ö –∞–∫—Ç–æ—Ä–æ–≤ –≤ Apify

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ–∫–∞–∂–µ—Ç:
1. –ö–∞–∫–∏–µ –∞–∫—Ç–æ—Ä—ã —É –≤–∞—Å –µ—Å—Ç—å
2. –ß—Ç–æ –æ–Ω–∏ –¥–µ–ª–∞—é—Ç
3. –ö–∞–∫ —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è
4. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø—É—Å–∫–æ–≤
"""

import os
import json
from datetime import datetime
from dotenv import load_dotenv
from apify_client import ApifyClient

load_dotenv()

def analyze_actor(client, actor_id):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∞–∫—Ç–æ—Ä"""
    
    print(f"\nüîç –ê–ù–ê–õ–ò–ó –ê–ö–¢–û–†–ê: {actor_id}")
    print("="*60)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫—Ç–æ—Ä–µ
        actor_info = client.actor(actor_id).get()
        
        print(f"üé≠ –ù–∞–∑–≤–∞–Ω–∏–µ: {actor_info.get('name', 'N/A')}")
        print(f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {(actor_info.get('description', 'N/A') or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')[:200]}...")
        print(f"üè∑Ô∏è –¢–µ–≥–∏: {', '.join(actor_info.get('taggedTemplateIds', []))}")
        print(f"üë§ –ê–≤—Ç–æ—Ä: {actor_info.get('username', 'N/A')}")
        print(f"üìÖ –°–æ–∑–¥–∞–Ω: {actor_info.get('createdAt', 'N/A')}")
        print(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω: {actor_info.get('modifiedAt', 'N/A')}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = actor_info.get('stats', {})
        print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   üèÉ –í—Å–µ–≥–æ –∑–∞–ø—É—Å–∫–æ–≤: {stats.get('totalRuns', 0)}")
        print(f"   ‚≠ê –†–µ–π—Ç–∏–Ω–≥: {stats.get('rating', 'N/A')}")
        print(f"   üí∞ –°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {stats.get('averageComputeUnits', 'N/A')} –µ–¥–∏–Ω–∏—Ü")
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø—É—Å–∫–∏ —ç—Ç–æ–≥–æ –∞–∫—Ç–æ—Ä–∞
        print(f"\nüìà –ü–û–°–õ–ï–î–ù–ò–ï –ó–ê–ü–£–°–ö–ò:")
        runs = client.actor(actor_id).runs().list(limit=5)
        
        if runs.items:
            for i, run in enumerate(runs.items):
                status_emoji = {
                    'SUCCEEDED': '‚úÖ',
                    'FAILED': '‚ùå', 
                    'ABORTED': '‚ö†Ô∏è',
                    'RUNNING': 'üèÉ',
                    'READY': '‚è≥'
                }.get(run.get('status', ''), '‚ùì')
                
                print(f"   {i+1}. {status_emoji} {run.get('status', 'N/A')} - {run.get('startedAt', 'N/A')}")
                
                # –ï—Å–ª–∏ –∑–∞–ø—É—Å–∫ —É—Å–ø–µ—à–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                if run.get('status') == 'SUCCEEDED' and run.get('defaultDatasetId'):
                    try:
                        dataset = client.dataset(run['defaultDatasetId'])
                        item_count = dataset.get().get('itemCount', 0)
                        print(f"      üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {item_count}")
                    except:
                        print(f"      üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å")
        else:
            print("   üì≠ –ù–µ—Ç –∑–∞–ø—É—Å–∫–æ–≤")
            
        return actor_info
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∞–∫—Ç–æ—Ä–∞: {e}")
        return None

def analyze_recent_runs(client):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø—É—Å–∫–∏"""
    
    print(f"\nüèÉ –í–ê–®–ò –ü–û–°–õ–ï–î–ù–ò–ï –ó–ê–ü–£–°–ö–ò")
    print("="*60)
    
    try:
        runs = client.runs().list(limit=10)
        
        if not runs.items:
            print("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø—É—Å–∫–æ–≤")
            return
        
        for i, run in enumerate(runs.items):
            status_emoji = {
                'SUCCEEDED': '‚úÖ',
                'FAILED': '‚ùå', 
                'ABORTED': '‚ö†Ô∏è',
                'RUNNING': 'üèÉ',
                'READY': '‚è≥'
            }.get(run.get('status', ''), '‚ùì')
            
            print(f"\n{i+1}. {status_emoji} –ó–∞–ø—É—Å–∫ ID: {run.get('id', 'N/A')}")
            print(f"   üé≠ –ê–∫—Ç–æ—Ä: {run.get('actId', 'N/A')}")
            print(f"   üìä –°—Ç–∞—Ç—É—Å: {run.get('status', 'N/A')}")
            print(f"   üìÖ –ù–∞—á–∞—Ç: {run.get('startedAt', 'N/A')}")
            print(f"   ‚è±Ô∏è –ó–∞–≤–µ—Ä—à–µ–Ω: {run.get('finishedAt', 'N/A')}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª–µ–π)
            if run.get('options', {}).get('input'):
                input_data = run['options']['input']
                print(f"   üìù –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
                for key, value in list(input_data.items())[:3]:
                    if isinstance(value, str) and len(value) > 50:
                        value = value[:50] + "..."
                    print(f"      {key}: {value}")
            
            # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
            if run.get('status') == 'SUCCEEDED' and run.get('defaultDatasetId'):
                try:
                    dataset = client.dataset(run['defaultDatasetId'])
                    item_count = dataset.get().get('itemCount', 0)
                    print(f"   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {item_count}")
                except:
                    pass
                    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–ø—É—Å–∫–æ–≤: {e}")

def get_dataset_sample(client, dataset_id, limit=3):
    """–ü–æ–ª—É—á–∞–µ—Ç –æ–±—Ä–∞–∑–µ—Ü –¥–∞–Ω–Ω—ã—Ö –∏–∑ –¥–∞—Ç–∞—Å–µ—Ç–∞"""
    
    try:
        items = client.dataset(dataset_id).list_items(limit=limit).items
        
        if items:
            print(f"\nüìã –û–ë–†–ê–ó–ï–¶ –î–ê–ù–ù–´–• (–ø–µ—Ä–≤—ã–µ {len(items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤):")
            print("-" * 40)
            
            for i, item in enumerate(items):
                print(f"\n{i+1}. –≠–ª–µ–º–µ–Ω—Ç:")
                if isinstance(item, dict):
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª—é—á–∏ –∏ –∑–Ω–∞—á–µ–Ω–∏—è
                    for key, value in list(item.items())[:5]:  # –ü–µ—Ä–≤—ã–µ 5 –ø–æ–ª–µ–π
                        if isinstance(value, str) and len(value) > 100:
                            value = value[:100] + "..."
                        print(f"   {key}: {value}")
                else:
                    print(f"   {str(item)[:200]}...")
        else:
            print("\nüìã –î–∞—Ç–∞—Å–µ—Ç –ø—É—Å—Ç")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    client = ApifyClient(os.getenv('APIFY_API_TOKEN'))
    print("üî¨ –ê–ù–ê–õ–ò–ó –í–ê–®–ò–• –ê–ö–¢–û–†–û–í –ò –ó–ê–ü–£–°–ö–û–í")
    print("="*60)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø—É—Å–∫–∏
    analyze_recent_runs(client)
    
    # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∞–∫—Ç–æ—Ä—ã –∏–∑ –∑–∞–ø—É—Å–∫–æ–≤
    print(f"\nüé≠ –ê–ù–ê–õ–ò–ó –ò–°–ü–û–õ–¨–ó–£–ï–ú–´–• –ê–ö–¢–û–†–û–í")
    print("="*60)
    
    try:
        runs = client.runs().list(limit=20)
        unique_actors = set()
        
        for run in runs.items:
            if run.get('actId'):
                unique_actors.add(run['actId'])
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(unique_actors)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞–∫—Ç–æ—Ä–æ–≤:")
        
        for actor_id in unique_actors:
            analyze_actor(client, actor_id)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–∑–µ—Ü –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
            actor_runs = client.actor(actor_id).runs().list(limit=5)
            for run in actor_runs.items:
                if run.get('status') == 'SUCCEEDED' and run.get('defaultDatasetId'):
                    print(f"\nüìä –ü–û–°–õ–ï–î–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –∏–∑ –∑–∞–ø—É—Å–∫–∞ {run['id']}:")
                    get_dataset_sample(client, run['defaultDatasetId'])
                    break
            
            print("\n" + "="*60)
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()
