#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
"""

import os
from dotenv import load_dotenv
from instagram_parser import InstagramParser

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
load_dotenv('mongodb_config.env')

def test_duplicate_detection():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ë–ù–ê–†–£–ñ–ï–ù–ò–Ø –î–£–ë–õ–ò–ö–ê–¢–û–í")
    print("="*50)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞
    apify_token = os.getenv("APIFY_API_TOKEN")
    mongodb_uri = os.getenv('MONGODB_URI', 'mongodb://trend_ai_user:LoGRomE2zJ0k0fuUhoTn@localhost:27017/instagram_gallery')
    
    if not apify_token:
        print("‚ùå APIFY_API_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    parser = InstagramParser(apify_token, mongodb_uri)
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ MongoDB
    if not parser.connect_mongodb():
        print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB")
        return
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_images = [
        {
            "image_url": "https://example.com/test1.jpg",
            "post_id": "test_post_1",
            "timestamp": "2025-01-01T00:00:00Z",
            "likes_count": 100,
            "comments_count": 10,
            "caption": "Test image 1",
            "image_type": "image"
        },
        {
            "image_url": "https://example.com/test2.jpg", 
            "post_id": "test_post_2",
            "timestamp": "2025-01-01T00:00:00Z",
            "likes_count": 200,
            "comments_count": 20,
            "caption": "Test image 2",
            "image_type": "image"
        }
    ]
    
    print("üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è...")
    saved_count = parser.save_to_mongodb(test_images, "test_user")
    print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved_count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    
    print("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã)...")
    saved_count_2 = parser.save_to_mongodb(test_images, "test_user")
    print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved_count_2} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 0)")
    
    print("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –Ω–æ–≤—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏...")
    new_images = [
        {
            "image_url": "https://example.com/test3.jpg",
            "post_id": "test_post_3", 
            "timestamp": "2025-01-01T00:00:00Z",
            "likes_count": 300,
            "comments_count": 30,
            "caption": "Test image 3",
            "image_type": "image"
        }
    ]
    saved_count_3 = parser.save_to_mongodb(new_images, "test_user")
    print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved_count_3} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 1)")
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    test_duplicate_detection()

