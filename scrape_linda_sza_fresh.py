"""
–°–≤–µ–∂–∏–π —Å–∫—Ä–∞–ø–∏–Ω–≥ –ø—Ä–æ—Ñ–∏–ª—è @linda.sza —Å –ø–æ–º–æ—â—å—é Instagram –∞–∫—Ç–æ—Ä–∞
"""

import os
import time
import json
from datetime import datetime
from dotenv import load_dotenv
from apify_client import ApifyClient
import pandas as pd

load_dotenv()

def scrape_linda_sza_fresh():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–≤–µ–∂–∏–π —Å–∫—Ä–∞–ø–∏–Ω–≥ –ø—Ä–æ—Ñ–∏–ª—è @linda.sza"""
    
    client = ApifyClient(os.getenv('APIFY_API_TOKEN'))
    print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Apify API —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    
    # ID Instagram —Å–∫—Ä–∞–ø–µ—Ä–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–±–æ—á–∏–π –∞–∫—Ç–æ—Ä)
    actor_id = "apify/instagram-scraper"
    
    # –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∫—Ä–∞–ø–∏–Ω–≥–∞ @linda.sza (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ)
    input_data = {
        "directUrls": ["https://www.instagram.com/linda.sza/"],
        "resultsType": "posts",  # –í–º–µ—Å—Ç–æ "details" –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        "resultsLimit": 50,      # –ú–µ–Ω—å—à–µ –¥–ª—è —Ç–µ—Å—Ç–∞
        "addParentData": False
    }
    
    print(f"\nüéØ –°–í–ï–ñ–ò–ô –°–ö–†–ê–ü–ò–ù–ì –ü–†–û–§–ò–õ–Ø @linda.sza")
    print("="*60)
    print(f"üîç URL –ø—Ä–æ—Ñ–∏–ª—è: {input_data['directUrls'][0]}")
    print(f"üìä –ú–∞–∫—Å–∏–º—É–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {input_data['resultsLimit']}")
    print(f"üéØ –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö: {input_data['resultsType']}")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–∫—Ç–æ—Ä
        print(f"\nüöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –∞–∫—Ç–æ—Ä {actor_id}...")
        print("‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 30-60 —Å–µ–∫—É–Ω–¥...")
        
        start_time = time.time()
        run = client.actor(actor_id).call(run_input=input_data)
        elapsed_time = time.time() - start_time
        
        run_id = run['id']
        print(f"‚úÖ –ê–∫—Ç–æ—Ä –∑–∞–ø—É—â–µ–Ω —Å ID: {run_id}")
        print(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {elapsed_time:.1f} —Å–µ–∫—É–Ω–¥")
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        print(f"\n‚è≥ –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
        timeout = 600  # 10 –º–∏–Ω—É—Ç
        start_time = time.time()
        
        while time.time() - start_time < timeout:
            run_info = client.run(run_id).get()
            status = run_info.get('status')
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            if status == 'RUNNING':
                print(f"üèÉ –°—Ç–∞—Ç—É—Å: {status} - –ê–∫—Ç–æ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç...")
            elif status == 'READY':
                print(f"‚è≥ –°—Ç–∞—Ç—É—Å: {status} - –ê–∫—Ç–æ—Ä –≥–æ—Ç–æ–≤–∏—Ç—Å—è...")
            else:
                print(f"üìä –°—Ç–∞—Ç—É—Å: {status}")
            
            if status == 'SUCCEEDED':
                print("‚úÖ –°–∫—Ä–∞–ø–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
                break
            elif status in ['FAILED', 'ABORTED']:
                print(f"‚ùå –°–∫—Ä–∞–ø–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π: {status}")
                return None
            
            time.sleep(15)  # –ñ–¥–µ–º 15 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
        else:
            print("‚è∞ –¢–∞–π–º–∞—É—Ç - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–æ—Ä")
            client.run(run_id).abort()
            return None
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        dataset_id = run_info.get('defaultDatasetId')
        if not dataset_id:
            print("‚ùå Dataset ID –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return None
        
        print(f"\nüìä –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ –¥–∞—Ç–∞—Å–µ—Ç–∞ {dataset_id}...")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∞—Ç–∞—Å–µ—Ç–µ
        dataset_info = client.dataset(dataset_id).get()
        total_items = dataset_info.get('itemCount', 0)
        print(f"üìà –í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –¥–∞—Ç–∞—Å–µ—Ç–µ: {total_items}")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        dataset_items = client.dataset(dataset_id).list_items()
        items = dataset_items.items
        
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        
        if items:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
            print(f"\nüìã –°–¢–†–£–ö–¢–£–†–ê –î–ê–ù–ù–´–•:")
            print("="*50)
            
            first_item = items[0]
            if isinstance(first_item, dict):
                print("üîë –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è:")
                for key in list(first_item.keys())[:20]:  # –ü–µ—Ä–≤—ã–µ 20 –ø–æ–ª–µ–π
                    print(f"   ‚Ä¢ {key}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            print(f"\nüìã –ü–ï–†–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
            print("="*50)
            
            for i, item in enumerate(items[:5]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                print(f"\n{i+1}. üì∏ –ü–æ—Å—Ç:")
                
                if isinstance(item, dict):
                    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                    if 'shortCode' in item:
                        print(f"   üîó –ö–æ–¥: {item.get('shortCode', 'N/A')}")
                    if 'url' in item:
                        print(f"   üåê URL: {item.get('url', 'N/A')}")
                    if 'type' in item:
                        print(f"   üìù –¢–∏–ø: {item.get('type', 'N/A')}")
                    
                    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                    if 'ownerUsername' in item:
                        print(f"   üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{item.get('ownerUsername', 'N/A')}")
                    if 'ownerFullName' in item:
                        print(f"   üìõ –ü–æ–ª–Ω–æ–µ –∏–º—è: {item.get('ownerFullName', 'N/A')}")
                    
                    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                    if 'likesCount' in item:
                        print(f"   ‚ù§Ô∏è –õ–∞–π–∫–∏: {item.get('likesCount', 'N/A')}")
                    if 'commentsCount' in item:
                        print(f"   üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {item.get('commentsCount', 'N/A')}")
                    
                    # –¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞
                    if 'caption' in item and item['caption']:
                        caption = item['caption']
                        if len(caption) > 150:
                            caption = caption[:150] + "..."
                        print(f"   üìù –¢–µ–∫—Å—Ç: {caption}")
                    
                    # –•–µ—à—Ç–µ–≥–∏
                    if 'hashtags' in item and item['hashtags']:
                        hashtags = item['hashtags'][:8]  # –ü–µ—Ä–≤—ã–µ 8 —Ö–µ—à—Ç–µ–≥–æ–≤
                        print(f"   üè∑Ô∏è –•–µ—à—Ç–µ–≥–∏: {', '.join(hashtags)}")
                    
                    # –î–∞—Ç–∞
                    if 'timestamp' in item:
                        timestamp = item.get('timestamp', 'N/A')
                        print(f"   üìÖ –î–∞—Ç–∞: {timestamp}")
                    
                    # –ú–µ–¥–∏–∞
                    if 'displayUrl' in item:
                        print(f"   üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {item.get('displayUrl', 'N/A')[:50]}...")
                else:
                    print(f"   {str(item)[:200]}...")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            
            # JSON —Ñ–∞–π–ª
            json_filename = f"linda_sza_fresh_{timestamp}.json"
            with open(json_filename, 'w', encoding='utf-8') as f:
                json.dump(items, f, ensure_ascii=False, indent=2)
            print(f"\nüíæ JSON —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {json_filename}")
            
            # CSV —Ñ–∞–π–ª (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
            try:
                df = pd.DataFrame(items)
                csv_filename = f"linda_sza_fresh_{timestamp}.csv"
                df.to_csv(csv_filename, index=False, encoding='utf-8')
                print(f"üíæ CSV —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {csv_filename}")
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ CSV: {e}")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–í–ï–ñ–ò–• –î–ê–ù–ù–´–•:")
            print("="*35)
            print(f"üìà –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: {len(items)}")
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            if items and isinstance(items[0], dict):
                total_likes = sum(item.get('likesCount', 0) for item in items if item.get('likesCount'))
                total_comments = sum(item.get('commentsCount', 0) for item in items if item.get('commentsCount'))
                unique_users = len(set(item.get('ownerUsername', '') for item in items if item.get('ownerUsername')))
                
                # –¢–∏–ø—ã –ø–æ—Å—Ç–æ–≤
                post_types = {}
                for item in items:
                    post_type = item.get('type', 'Unknown')
                    post_types[post_type] = post_types.get(post_type, 0) + 1
                
                print(f"‚ù§Ô∏è –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤: {total_likes:,}")
                print(f"üí¨ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {total_comments:,}")
                print(f"üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {unique_users}")
                
                print(f"\nüìù –¢–∏–ø—ã –ø–æ—Å—Ç–æ–≤:")
                for post_type, count in post_types.items():
                    print(f"   {post_type}: {count}")
                
                # –¢–æ–ø —Ö–µ—à—Ç–µ–≥–æ–≤
                all_hashtags = []
                for item in items:
                    if item.get('hashtags'):
                        all_hashtags.extend(item['hashtags'])
                
                if all_hashtags:
                    hashtag_counts = {}
                    for hashtag in all_hashtags:
                        hashtag_counts[hashtag] = hashtag_counts.get(hashtag, 0) + 1
                    
                    top_hashtags = sorted(hashtag_counts.items(), key=lambda x: x[1], reverse=True)[:10]
                    print(f"\nüè∑Ô∏è –¢–æ–ø-10 —Ö–µ—à—Ç–µ–≥–æ–≤:")
                    for hashtag, count in top_hashtags:
                        print(f"   #{hashtag}: {count} —Ä–∞–∑")
                
                # –ê–Ω–∞–ª–∏–∑ –¥–∞—Ç
                if items:
                    timestamps = [item.get('timestamp') for item in items if item.get('timestamp')]
                    if timestamps:
                        timestamps.sort()
                        print(f"\nüìÖ –í—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω:")
                        print(f"   –°–∞–º—ã–π —Å—Ç–∞—Ä—ã–π –ø–æ—Å—Ç: {timestamps[0]}")
                        print(f"   –°–∞–º—ã–π –Ω–æ–≤—ã–π –ø–æ—Å—Ç: {timestamps[-1]}")
        
        return items
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return None

def compare_with_old_data():
    """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ —Å–æ —Å—Ç–∞—Ä—ã–º–∏"""
    
    print(f"\nüîÑ –°–†–ê–í–ù–ï–ù–ò–ï –° –ü–†–ï–î–´–î–£–©–ò–ú–ò –î–ê–ù–ù–´–ú–ò")
    print("="*50)
    
    # –ò—â–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã
    import glob
    old_files = glob.glob("linda_sza_data_*.json")
    
    if old_files:
        print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ {len(old_files)} —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–∞–Ω–Ω—ã—Ö")
        
        # –ë–µ—Ä–µ–º —Å–∞–º—ã–π –Ω–æ–≤—ã–π —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª
        latest_old_file = max(old_files)
        print(f"üìÑ –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å: {latest_old_file}")
        
        try:
            with open(latest_old_file, 'r', encoding='utf-8') as f:
                old_data = json.load(f)
            
            print(f"üìä –°—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ: {len(old_data)} –ø–æ—Å—Ç–æ–≤")
            
            # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–æ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            return old_data
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
    else:
        print("üìÅ –°—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    return None

if __name__ == "__main__":
    print("üì∏ –°–í–ï–ñ–ò–ô –°–ö–†–ê–ü–ò–ù–ì –ü–†–û–§–ò–õ–Ø @linda.sza")
    print("="*60)
    
    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å–æ —Å—Ç–∞—Ä—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    old_data = compare_with_old_data()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–≤–µ–∂–∏–π —Å–∫—Ä–∞–ø–∏–Ω–≥
    fresh_results = scrape_linda_sza_fresh()
    
    if fresh_results:
        print(f"\nüéâ –°–≤–µ–∂–∏–π —Å–∫—Ä–∞–ø–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω! –ü–æ–ª—É—á–µ–Ω–æ {len(fresh_results)} –ø–æ—Å—Ç–æ–≤")
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —Å—Ç–∞—Ä—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        if old_data:
            print(f"\nüìä –°–†–ê–í–ù–ï–ù–ò–ï –î–ê–ù–ù–´–•:")
            print("="*30)
            print(f"üìà –°—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ: {len(old_data)} –ø–æ—Å—Ç–æ–≤")
            print(f"üìà –ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: {len(fresh_results)} –ø–æ—Å—Ç–æ–≤")
            print(f"üìà –†–∞–∑–Ω–∏—Ü–∞: {len(fresh_results) - len(old_data)} –ø–æ—Å—Ç–æ–≤")
            
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ—Å—Ç—ã –ø–æ shortCode
            old_codes = set(item.get('shortCode') for item in old_data if item.get('shortCode'))
            new_codes = set(item.get('shortCode') for item in fresh_results if item.get('shortCode'))
            
            common_codes = old_codes.intersection(new_codes)
            new_only_codes = new_codes - old_codes
            old_only_codes = old_codes - new_codes
            
            print(f"üîÑ –û–±—â–∏—Ö –ø–æ—Å—Ç–æ–≤: {len(common_codes)}")
            print(f"üÜï –¢–æ–ª—å–∫–æ –≤ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {len(new_only_codes)}")
            print(f"üóëÔ∏è –¢–æ–ª—å–∫–æ –≤ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {len(old_only_codes)}")
        
        print(f"\nüí° –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ @linda.sza –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞!")
    else:
        print("\n‚ùå –°–≤–µ–∂–∏–π —Å–∫—Ä–∞–ø–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è")
