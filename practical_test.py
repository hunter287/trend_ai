"""
–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç Apify API - –∑–∞–ø—É—Å–∫ –∞–∫—Ç–æ—Ä–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
"""

import os
import time
import json
from dotenv import load_dotenv
from apify_client import ApifyClient

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def test_web_scraper():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º Web Scraper –Ω–∞ –ø—Ä–æ—Å—Ç–æ–º —Å–∞–π—Ç–µ"""
    
    client = ApifyClient(os.getenv('APIFY_API_TOKEN'))
    print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Apify API —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    
    # –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∫—Ä–∞–ø–∏–Ω–≥–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ —Å–∞–π—Ç–∞
    input_data = {
        "startUrls": [
            {"url": "https://quotes.toscrape.com/"}  # –¢–µ—Å—Ç–æ–≤—ã–π —Å–∞–π—Ç –¥–ª—è —Å–∫—Ä–∞–ø–∏–Ω–≥–∞
        ],
        "pageFunction": """
async function pageFunction(context) {
    const { page, request } = context;
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–∏—Ç–∞—Ç—ã —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const quotes = await page.evaluate(() => {
        const quoteElements = document.querySelectorAll('.quote');
        return Array.from(quoteElements).map(quote => {
            const text = quote.querySelector('.text')?.textContent;
            const author = quote.querySelector('.author')?.textContent;
            const tags = Array.from(quote.querySelectorAll('.tag')).map(tag => tag.textContent);
            
            return {
                text: text,
                author: author,
                tags: tags,
                url: window.location.href
            };
        });
    });
    
    return quotes.map(quote => ({
        ...quote,
        scrapedAt: new Date().toISOString()
    }));
}
        """,
        "maxRequestRetries": 2,
        "maxPagesPerCrawl": 1,
        "maxRequestsPerCrawl": 1
    }
    
    print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º Web Scraper...")
    print(f"üéØ –¶–µ–ª–µ–≤–æ–π —Å–∞–π—Ç: {input_data['startUrls'][0]['url']}")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–∫—Ç–æ—Ä
        run = client.actor('apify/web-scraper').call(run_input=input_data)
        run_id = run['id']
        print(f"‚úÖ –ê–∫—Ç–æ—Ä –∑–∞–ø—É—â–µ–Ω —Å ID: {run_id}")
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (–º–∞–∫—Å–∏–º—É–º 5 –º–∏–Ω—É—Ç)
        print("‚è≥ –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
        timeout = 300  # 5 –º–∏–Ω—É—Ç
        start_time = time.time()
        
        while time.time() - start_time < timeout:
            run_info = client.run(run_id).get()
            status = run_info.get('status')
            
            print(f"üìä –°—Ç–∞—Ç—É—Å: {status}")
            
            if status == 'SUCCEEDED':
                print("‚úÖ –°–∫—Ä–∞–ø–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
                break
            elif status in ['FAILED', 'ABORTED']:
                print(f"‚ùå –°–∫—Ä–∞–ø–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π: {status}")
                return None
            
            time.sleep(10)  # –ñ–¥–µ–º 10 —Å–µ–∫—É–Ω–¥
        else:
            print("‚è∞ –¢–∞–π–º–∞—É—Ç - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–æ—Ä")
            client.run(run_id).abort()
            return None
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        dataset_id = run_info.get('defaultDatasetId')
        if not dataset_id:
            print("‚ùå Dataset ID –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return None
        
        print("üìä –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...")
        dataset_items = client.dataset(dataset_id).list_items()
        items = dataset_items.items
        
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if items:
            print("\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫—Ä–∞–ø–∏–Ω–≥–∞:")
            print("="*60)
            
            for i, item in enumerate(items[:3]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                if isinstance(item, list):
                    # –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç - —ç—Ç–æ —Å–ø–∏—Å–æ–∫ —Ü–∏—Ç–∞—Ç
                    for j, quote in enumerate(item[:2]):  # –ü–µ—Ä–≤—ã–µ 2 —Ü–∏—Ç–∞—Ç—ã
                        print(f"\n{i+1}.{j+1} üí¨ –¶–∏—Ç–∞—Ç–∞:")
                        print(f"üìù –¢–µ–∫—Å—Ç: {quote.get('text', 'N/A')}")
                        print(f"üë§ –ê–≤—Ç–æ—Ä: {quote.get('author', 'N/A')}")
                        print(f"üè∑Ô∏è –¢–µ–≥–∏: {', '.join(quote.get('tags', []))}")
                        print(f"üåê URL: {quote.get('url', 'N/A')}")
                        print(f"üìÖ –í—Ä–µ–º—è: {quote.get('scrapedAt', 'N/A')}")
                else:
                    # –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç - —ç—Ç–æ –æ–±—ä–µ–∫—Ç
                    print(f"\n{i+1}. üìÑ –≠–ª–µ–º–µ–Ω—Ç:")
                    for key, value in item.items():
                        if isinstance(value, str) and len(value) > 100:
                            value = value[:100] + "..."
                        print(f"   {key}: {value}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
            filename = f"apify_results_{run_id}.json"
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(items, f, ensure_ascii=False, indent=2)
            print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {filename}")
        
        return items
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return None

def check_usage():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤"""
    
    client = ApifyClient(os.getenv('APIFY_API_TOKEN'))
    
    try:
        user = client.user().get()
        usage = user.get('monthlyUsage', {})
        
        print("\nüí∞ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï –†–ï–°–£–†–°–û–í:")
        print("="*40)
        print(f"üìä Compute units: {usage.get('compute', 0)}")
        print(f"üíæ Data transfer: {usage.get('dataTransfer', 0)} bytes")
        print(f"üì¶ Dataset operations: {usage.get('datasetWrites', 0)}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏: {e}")

if __name__ == "__main__":
    print("üî¨ –ü–†–ê–ö–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢ APIFY API")
    print("="*50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–æ –∑–∞–ø—É—Å–∫–∞
    check_usage()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
    results = test_web_scraper()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
    if results:
        check_usage()
        print(f"\nüéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –ü–æ–ª—É—á–µ–Ω–æ {len(results) if isinstance(results, list) else 0} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    else:
        print("\n‚ùå –¢–µ—Å—Ç –Ω–µ —É–¥–∞–ª—Å—è")
