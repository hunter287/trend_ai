"""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Apify API —Å Python

Apify - —ç—Ç–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –≤–µ–±-—Å–∫—Ä–∞–ø–∏–Ω–≥–∞ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç:
1. –ì–æ—Ç–æ–≤—ã–µ –∞–∫—Ç–æ—Ä—ã (–≥–æ—Ç–æ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è —Å–∫—Ä–∞–ø–∏–Ω–≥–∞)
2. –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –∞–∫—Ç–æ—Ä—ã
3. API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–∫—Ç–æ—Ä–∞–º–∏ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
4. –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö (Dataset, Key-value store, Request queue)

–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏:
- Actor: –ø—Ä–æ–≥—Ä–∞–º–º–∞, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ Apify
- Run: –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–∫—Ç–æ—Ä–∞
- Dataset: —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
- Key-value store: —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–∏–µ
- Request queue: –æ—á–µ—Ä–µ–¥—å –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∞–∫—Ç–æ—Ä–∞
"""

import os
import json
import time
from typing import Dict, List, Any
from dotenv import load_dotenv
from apify_client import ApifyClient
import pandas as pd

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

class ApifyManager:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Apify API"""
    
    def __init__(self, api_token: str = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Apify
        
        Args:
            api_token: API —Ç–æ–∫–µ–Ω Apify. –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –±–µ—Ä–µ—Ç—Å—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
        """
        self.api_token = api_token or os.getenv('APIFY_API_TOKEN')
        if not self.api_token:
            raise ValueError("API —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é APIFY_API_TOKEN –∏–ª–∏ –ø–µ—Ä–µ–¥–∞–π—Ç–µ —Ç–æ–∫–µ–Ω –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä")
        
        self.client = ApifyClient(self.api_token)
        print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Apify API —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    
    def get_user_info(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        try:
            user_info = self.client.user().get()
            print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_info.get('name', 'N/A')}")
            print(f"üìß Email: {user_info.get('email', 'N/A')}")
            return user_info
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {e}")
            return {}
    
    def list_actors(self, limit: int = 10) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫—Ç–æ—Ä–æ–≤"""
        try:
            actors = self.client.actors().list(limit=limit)
            print(f"üé≠ –ù–∞–π–¥–µ–Ω–æ {len(actors.items)} –∞–∫—Ç–æ—Ä–æ–≤:")
            for actor in actors.items:
                print(f"  - {actor.get('name', 'N/A')} (ID: {actor.get('id', 'N/A')})")
            return actors.items
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–æ—Ä–æ–≤: {e}")
            return []
    
    def run_actor(self, actor_id: str, input_data: Dict[str, Any] = None) -> str:
        """
        –ó–∞–ø—É—Å–∫ –∞–∫—Ç–æ—Ä–∞
        
        Args:
            actor_id: ID –∞–∫—Ç–æ—Ä–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞
            input_data: –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–∫—Ç–æ—Ä–∞
            
        Returns:
            run_id: ID –∑–∞–ø—É—Å–∫–∞
        """
        try:
            print(f"üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –∞–∫—Ç–æ—Ä {actor_id}...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–∫—Ç–æ—Ä
            run = self.client.actor(actor_id).call(input_data or {})
            run_id = run['id']
            
            print(f"‚úÖ –ê–∫—Ç–æ—Ä –∑–∞–ø—É—â–µ–Ω —Å ID: {run_id}")
            return run_id
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∞–∫—Ç–æ—Ä–∞: {e}")
            return None
    
    def wait_for_run_completion(self, run_id: str, timeout: int = 300) -> Dict[str, Any]:
        """
        –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–∫—Ç–æ—Ä–∞
        
        Args:
            run_id: ID –∑–∞–ø—É—Å–∫–∞
            timeout: –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            
        Returns:
            run_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø—É—Å–∫–µ
        """
        try:
            print(f"‚è≥ –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø—É—Å–∫–∞ {run_id}...")
            
            start_time = time.time()
            while time.time() - start_time < timeout:
                run_info = self.client.run(run_id).get()
                status = run_info.get('status')
                
                print(f"üìä –°—Ç–∞—Ç—É—Å: {status}")
                
                if status in ['SUCCEEDED', 'FAILED', 'ABORTED']:
                    print(f"‚úÖ –ó–∞–ø—É—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º: {status}")
                    return run_info
                
                time.sleep(5)  # –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            
            print(f"‚è∞ –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–µ–≤—ã—à–µ–Ω")
            return {}
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {e}")
            return {}
    
    def get_dataset_items(self, dataset_id: str, limit: int = 100) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –¥–∞—Ç–∞—Å–µ—Ç–∞
        
        Args:
            dataset_id: ID –¥–∞—Ç–∞—Å–µ—Ç–∞
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            
        Returns:
            items: –°–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–∑ –¥–∞—Ç–∞—Å–µ—Ç–∞
        """
        try:
            print(f"üìä –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –¥–∞—Ç–∞—Å–µ—Ç–∞ {dataset_id}...")
            
            dataset_items = self.client.dataset(dataset_id).list_items(limit=limit)
            items = dataset_items.items
            
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–∑ –¥–∞—Ç–∞—Å–µ—Ç–∞")
            return items
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –¥–∞—Ç–∞—Å–µ—Ç–∞: {e}")
            return []
    
    def save_to_csv(self, items: List[Dict[str, Any]], filename: str):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ CSV —Ñ–∞–π–ª"""
        try:
            df = pd.DataFrame(items)
            df.to_csv(filename, index=False, encoding='utf-8')
            print(f"üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {filename}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ CSV: {e}")
    
    def get_key_value_store(self, store_id: str, key: str = None) -> Any:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Key-value store
        
        Args:
            store_id: ID —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
            key: –ö–ª—é—á –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è (–µ—Å–ª–∏ None, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –∫–ª—é—á–∏)
            
        Returns:
            data: –î–∞–Ω–Ω—ã–µ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        """
        try:
            if key:
                data = self.client.key_value_store(store_id).get_record(key)
                print(f"üîë –ü–æ–ª—É—á–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∫–ª—é—á–∞ '{key}' –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ {store_id}")
            else:
                data = self.client.key_value_store(store_id).list_keys()
                print(f"üîë –ü–æ–ª—É—á–µ–Ω—ã –≤—Å–µ –∫–ª—é—á–∏ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ {store_id}")
            
            return data
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Key-value store: {e}")
            return None


def example_web_scraping():
    """–ü—Ä–∏–º–µ—Ä –≤–µ–±-—Å–∫—Ä–∞–ø–∏–Ω–≥–∞ —Å –ø–æ–º–æ—â—å—é –≥–æ—Ç–æ–≤–æ–≥–æ –∞–∫—Ç–æ—Ä–∞"""
    print("\n" + "="*50)
    print("üåê –ü–†–ò–ú–ï–† –í–ï–ë-–°–ö–†–ê–ü–ò–ù–ì–ê")
    print("="*50)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä
    apify = ApifyManager()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    apify.get_user_info()
    
    # –ü—Ä–∏–º–µ—Ä: —Å–∫—Ä–∞–ø–∏–Ω–≥ Google Shopping
    # Actor ID –¥–ª—è Google Shopping: apify/google-shopping-scraper
    actor_id = "apify/google-shopping-scraper"
    
    # –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–∫—Ç–æ—Ä–∞
    input_data = {
        "queries": ["laptop", "smartphone"],
        "maxRequestRetries": 3,
        "maxConcurrency": 10,
        "maxRequestRetries": 3,
        "maxItemsPerQuery": 20
    }
    
    print(f"\nüéØ –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∞–ø–∏–Ω–≥ Google Shopping...")
    print(f"üìù –ü–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã: {input_data['queries']}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–∫—Ç–æ—Ä
    run_id = apify.run_actor(actor_id, input_data)
    
    if run_id:
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        run_info = apify.wait_for_run_completion(run_id)
        
        if run_info.get('status') == 'SUCCEEDED':
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –¥–∞—Ç–∞—Å–µ—Ç–∞
            dataset_id = run_info.get('defaultDatasetId')
            if dataset_id:
                items = apify.get_dataset_items(dataset_id, limit=50)
                
                if items:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ CSV
                    apify.save_to_csv(items, 'google_shopping_results.csv')
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                    print(f"\nüìã –ü–µ—Ä–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
                    for i, item in enumerate(items[:3]):
                        print(f"  {i+1}. {item.get('title', 'N/A')} - {item.get('price', 'N/A')}")


def example_actor_management():
    """–ü—Ä–∏–º–µ—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–∫—Ç–æ—Ä–∞–º–∏"""
    print("\n" + "="*50)
    print("üé≠ –£–ü–†–ê–í–õ–ï–ù–ò–ï –ê–ö–¢–û–†–ê–ú–ò")
    print("="*50)
    
    apify = ApifyManager()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∞–∫—Ç–æ—Ä–æ–≤
    actors = apify.list_actors(limit=5)
    
    if actors:
        print(f"\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–∫—Ç–æ—Ä—ã:")
        for i, actor in enumerate(actors):
            print(f"  {i+1}. {actor.get('name', 'N/A')}")
            print(f"     ID: {actor.get('id', 'N/A')}")
            print(f"     –û–ø–∏—Å–∞–Ω–∏–µ: {actor.get('description', 'N/A')[:100]}...")
            print()


def example_key_value_store():
    """–ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å Key-value store"""
    print("\n" + "="*50)
    print("üîë KEY-VALUE STORE")
    print("="*50)
    
    apify = ApifyManager()
    
    # –ü—Ä–∏–º–µ—Ä: –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Key-value store
    # –û–±—ã—á–Ω–æ store_id –ø–æ–ª—É—á–∞–µ—Ç—Å—è –∏–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–ø—É—Å–∫–µ
    print("üí° –î–ª—è —Ä–∞–±–æ—Ç—ã —Å Key-value store –Ω—É–∂–µ–Ω store_id –∏–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–ø—É—Å–∫–µ –∞–∫—Ç–æ—Ä–∞")
    print("   –≠—Ç–æ—Ç –ø—Ä–∏–º–µ—Ä –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ store_id")


if __name__ == "__main__":
    print("üöÄ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø APIFY API")
    print("="*50)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        apify = ApifyManager()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
        example_actor_management()
        example_web_scraping()
        example_key_value_store()
        
    except ValueError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        print("\nüí° –î–ª—è —Ä–∞–±–æ—Ç—ã —Å Apify API:")
        print("1. –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞")
        print("2. –î–æ–±–∞–≤—å—Ç–µ –≤ –Ω–µ–≥–æ: APIFY_API_TOKEN=–≤–∞—à_—Ç–æ–∫–µ–Ω")
        print("3. –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω –Ω–∞ https://console.apify.com/account/integrations")
    
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
