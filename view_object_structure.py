#!/usr/bin/env python3
"""
–ü—Ä–æ—Å–º–æ—Ç—Ä –æ–±—ä–µ–∫—Ç–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö Ximilar –≤ MongoDB
"""

import os
from dotenv import load_dotenv
from pymongo import MongoClient
import json

load_dotenv()

def view_object_structure():
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ–±—ä–µ–∫—Ç–æ–≤ –≤ MongoDB"""
    
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
        client = MongoClient("mongodb://localhost:27017/")
        db = client["instagram_gallery"]
        collection = db["images"]
        
        print("üîç –°–¢–†–£–ö–¢–£–†–ê –û–ë–™–ï–ö–¢–û–í XIMILAR –í MONGODB")
        print("=" * 60)
        
        # –ù–∞—Ö–æ–¥–∏–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Ç–µ–≥–∞–º–∏ Ximilar
        images_with_tags = collection.find({
            "ximilar_objects": {"$exists": True, "$ne": []}
        }).limit(5)
        
        count = 0
        for img in images_with_tags:
            count += 1
            print(f"\nüñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {count}:")
            print(f"   ‚Ä¢ ID: {img['_id']}")
            print(f"   ‚Ä¢ URL: {img.get('url', 'N/A')[:50]}...")
            print(f"   ‚Ä¢ –£—Å–ø–µ—Ö —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {img.get('ximilar_success', False)}")
            print(f"   ‚Ä¢ –í—Å–µ–≥–æ —Ç–µ–≥–æ–≤: {img.get('ximilar_total_tags', 0)}")
            print(f"   ‚Ä¢ –í—Å–µ–≥–æ –æ–±—ä–µ–∫—Ç–æ–≤: {img.get('ximilar_total_objects', 0)}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ–±—ä–µ–∫—Ç–æ–≤
            objects = img.get('ximilar_objects', [])
            if objects:
                print(f"\n   üì¶ –û–ë–™–ï–ö–¢–´ ({len(objects)}):")
                for i, obj in enumerate(objects, 1):
                    print(f"      {i}. {obj.get('name', 'N/A')} (ID: {obj.get('object_id', 'N/A')})")
                    print(f"         ‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {obj.get('top_category', 'N/A')}")
                    print(f"         ‚Ä¢ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {obj.get('probability', 0):.3f}")
                    print(f"         ‚Ä¢ –ü–ª–æ—â–∞–¥—å: {obj.get('area', 0):.3f}")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–≥–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
                    tags = obj.get('tags', {})
                    if tags:
                        print(f"         ‚Ä¢ –¢–µ–≥–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
                        for category, tag_list in tags.items():
                            if tag_list:
                                tag_names = [tag.get('name', '') for tag in tag_list[:3]]
                                print(f"           - {category}: {', '.join(tag_names)}")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ —Ç–µ–≥–∏
                    simple_tags = obj.get('tags_simple', [])
                    if simple_tags:
                        print(f"         ‚Ä¢ –ü—Ä–æ—Å—Ç—ã–µ —Ç–µ–≥–∏: {', '.join(simple_tags[:5])}")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç—É —Ç–µ–≥–æ–≤
                    tags_map = obj.get('tags_map', {})
                    if tags_map:
                        print(f"         ‚Ä¢ –ö–∞—Ä—Ç–∞ —Ç–µ–≥–æ–≤:")
                        for key, value in list(tags_map.items())[:3]:
                            print(f"           - {key}: {value}")
                    
                    print()
            else:
                print("   ‚ùå –û–±—ä–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
            print("-" * 50)
        
        if count == 0:
            print("‚ùå –ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –æ–±—ä–µ–∫—Ç–∞–º–∏ Ximilar")
        else:
            print(f"\nüìä –ù–∞–π–¥–µ–Ω–æ {count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –æ–±—ä–µ–∫—Ç–∞–º–∏")
        
        client.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def export_object_structure():
    """–≠–∫—Å–ø–æ—Ä—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ–±—ä–µ–∫—Ç–æ–≤ –≤ JSON"""
    try:
        client = MongoClient("mongodb://localhost:27017/")
        db = client["instagram_gallery"]
        collection = db["images"]
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –æ–±—ä–µ–∫—Ç–∞–º–∏
        images = list(collection.find({
            "ximilar_objects": {"$exists": True, "$ne": []}
        }))
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        export_data = {
            "total_images": len(images),
            "images": []
        }
        
        for img in images:
            image_data = {
                "id": str(img["_id"]),
                "url": img.get("url", ""),
                "total_objects": img.get("ximilar_total_objects", 0),
                "objects": img.get("ximilar_objects", [])
            }
            export_data["images"].append(image_data)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        with open("ximilar_objects_structure.json", "w", encoding="utf-8") as f:
            json.dump(export_data, f, ensure_ascii=False, indent=2)
        
        print(f"üíæ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ–±—ä–µ–∫—Ç–æ–≤ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤ ximilar_objects_structure.json")
        print(f"üìä –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        
        client.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîç –ü–†–û–°–ú–û–¢–† –û–ë–™–ï–ö–¢–ù–û–ô –°–¢–†–£–ö–¢–£–†–´ XIMILAR")
    print("=" * 50)
    
    choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n1. –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã\n2. –≠–∫—Å–ø–æ—Ä—Ç –≤ JSON\n–í–≤–æ–¥ (1-2): ").strip()
    
    if choice == "1":
        view_object_structure()
    elif choice == "2":
        export_object_structure()
    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")

if __name__ == "__main__":
    main()
