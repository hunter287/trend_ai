#!/usr/bin/env python3
"""
Instagram –ø–∞—Ä—Å–µ—Ä –Ω–∞ Selenium WebDriver
–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –±—Ä–∞—É–∑–µ—Ä–∞ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π API
"""

import os
import time
import json
import requests
from datetime import datetime
from typing import List, Dict, Optional
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
from selenium.common.exceptions import TimeoutException, NoSuchElementException
from dotenv import load_dotenv
import pymongo

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
load_dotenv('mongodb_config.env')

class InstagramSeleniumParser:
    def __init__(self, mongodb_uri: str = None):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞"""
        self.mongodb_uri = mongodb_uri or os.getenv('MONGODB_URI', 'mongodb://trend_ai_user:|#!x1K52H.0{8d3@localhost:27017/instagram_gallery')
        self.driver = None
        self.wait = None
        self.client = None
        self.db = None
        self.collection = None
        
    def setup_driver(self, headless: bool = True) -> bool:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Chrome WebDriver"""
        try:
            chrome_options = Options()
            
            if headless:
                chrome_options.add_argument("--headless")
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
            chrome_options.add_argument("--no-sandbox")
            chrome_options.add_argument("--disable-dev-shm-usage")
            chrome_options.add_argument("--disable-gpu")
            chrome_options.add_argument("--window-size=1920,1080")
            chrome_options.add_argument("--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36")
            
            # –û—Ç–∫–ª—é—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
            prefs = {
                "profile.managed_default_content_settings.images": 2,
                "profile.default_content_setting_values.notifications": 2
            }
            chrome_options.add_experimental_option("prefs", prefs)
            
            self.driver = webdriver.Chrome(options=chrome_options)
            self.wait = WebDriverWait(self.driver, 10)
            
            print("‚úÖ Chrome WebDriver –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ WebDriver: {e}")
            return False
    
    def connect_mongodb(self) -> bool:
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB"""
        try:
            self.client = pymongo.MongoClient(self.mongodb_uri)
            self.db = self.client["instagram_gallery"]
            self.collection = self.db["images"]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            self.client.admin.command('ping')
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB: {e}")
            return False
    
    def login_instagram(self, username: str, password: str) -> bool:
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Instagram"""
        try:
            print(f"üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Instagram...")
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
            self.driver.get("https://www.instagram.com/accounts/login/")
            time.sleep(3)
            
            # –í–≤–æ–¥–∏–º –ª–æ–≥–∏–Ω
            username_input = self.wait.until(
                EC.presence_of_element_located((By.NAME, "username"))
            )
            username_input.clear()
            username_input.send_keys(username)
            
            # –í–≤–æ–¥–∏–º –ø–∞—Ä–æ–ª—å
            password_input = self.driver.find_element(By.NAME, "password")
            password_input.clear()
            password_input.send_keys(password)
            
            # –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞
            login_button = self.driver.find_element(By.XPATH, "//button[@type='submit']")
            login_button.click()
            
            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            time.sleep(5)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–∞
            if "instagram.com" in self.driver.current_url and "login" not in self.driver.current_url:
                print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
                return True
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            return False
    
    def parse_account(self, username: str, posts_limit: int = 100) -> List[Dict]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –∞–∫–∫–∞—É–Ω—Ç–∞ Instagram"""
        try:
            print(f"üîç –ü–∞—Ä—Å–∏–Ω–≥ –∞–∫–∫–∞—É–Ω—Ç–∞: @{username}")
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–∫–∫–∞—É–Ω—Ç–∞
            profile_url = f"https://www.instagram.com/{username}/"
            self.driver.get(profile_url)
            time.sleep(3)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞
            if "Page Not Found" in self.driver.page_source:
                print(f"‚ùå –ê–∫–∫–∞—É–Ω—Ç @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return []
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ
            profile_info = self.get_profile_info()
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç—ã
            posts = self.get_posts(posts_limit)
            
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(posts)} –ø–æ—Å—Ç–æ–≤")
            return posts
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∞–∫–∫–∞—É–Ω—Ç–∞: {e}")
            return []
    
    def get_profile_info(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ñ–∏–ª–µ"""
        try:
            profile_info = {}
            
            # –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                username_element = self.driver.find_element(By.XPATH, "//h2[contains(@class, 'x1lliihq')]")
                profile_info["username"] = username_element.text
            except:
                profile_info["username"] = "N/A"
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤
            try:
                posts_count_element = self.driver.find_element(By.XPATH, "//span[contains(text(), 'posts')]/span")
                profile_info["posts_count"] = posts_count_element.text
            except:
                profile_info["posts_count"] = "N/A"
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
            try:
                followers_element = self.driver.find_element(By.XPATH, "//span[contains(text(), 'followers')]/span")
                profile_info["followers_count"] = followers_element.text
            except:
                profile_info["followers_count"] = "N/A"
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å–æ–∫
            try:
                following_element = self.driver.find_element(By.XPATH, "//span[contains(text(), 'following')]/span")
                profile_info["following_count"] = following_element.text
            except:
                profile_info["following_count"] = "N/A"
            
            return profile_info
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ñ–∏–ª–µ: {e}")
            return {}
    
    def get_posts(self, posts_limit: int) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        try:
            posts = []
            posts_loaded = 0
            
            # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å—Ç–æ–≤
            while posts_loaded < posts_limit:
                # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ø–æ—Å—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                post_elements = self.driver.find_elements(By.XPATH, "//article//a[contains(@href, '/p/')]")
                
                if len(post_elements) > posts_loaded:
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã
                    for i in range(posts_loaded, min(len(post_elements), posts_limit)):
                        post_url = post_elements[i].get_attribute("href")
                        if post_url and post_url not in [p.get("url", "") for p in posts]:
                            post_data = self.get_post_data(post_url)
                            if post_data:
                                posts.append(post_data)
                                posts_loaded += 1
                                print(f"üì∏ –û–±—Ä–∞–±–æ—Ç–∞–Ω –ø–æ—Å—Ç {posts_loaded}/{posts_limit}")
                
                # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –≤–Ω–∏–∑
                self.driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
                time.sleep(2)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ –ø–æ—Å—Ç—ã
                if len(post_elements) == posts_loaded:
                    break
            
            return posts
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤: {e}")
            return []
    
    def get_post_data(self, post_url: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ—Å—Ç–∞"""
        try:
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ—Å—Ç–∞
            self.driver.get(post_url)
            time.sleep(2)
            
            post_data = {
                "url": post_url,
                "timestamp": datetime.now().isoformat(),
                "images": [],
                "likes": 0,
                "comments": 0,
                "caption": "",
                "hashtags": []
            }
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            images = self.get_post_images()
            post_data["images"] = images
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤
            try:
                likes_element = self.driver.find_element(By.XPATH, "//span[contains(@class, 'html-span')]")
                likes_text = likes_element.text
                if "likes" in likes_text:
                    post_data["likes"] = int(likes_text.split()[0].replace(",", ""))
            except:
                pass
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å—Ç–∞
            try:
                caption_element = self.driver.find_element(By.XPATH, "//div[contains(@class, 'x1lliihq')]//span")
                caption = caption_element.text
                post_data["caption"] = caption
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ö–µ—à—Ç–µ–≥–∏
                hashtags = [tag for tag in caption.split() if tag.startswith("#")]
                post_data["hashtags"] = hashtags
            except:
                pass
            
            return post_data
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞: {e}")
            return None
    
    def get_post_images(self) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ—Å—Ç–∞"""
        try:
            images = []
            
            # –ò—â–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–æ—Å—Ç–µ
            img_elements = self.driver.find_elements(By.XPATH, "//img[contains(@src, 'instagram.com')]")
            
            for img in img_elements:
                src = img.get_attribute("src")
                if src and "instagram.com" in src:
                    # –û—á–∏—â–∞–µ–º URL –æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                    clean_url = src.split("?")[0]
                    if clean_url not in images:
                        images.append(clean_url)
            
            return images
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}")
            return []
    
    def download_images(self, posts: List[Dict], download_dir: str = "images") -> List[Dict]:
        """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        try:
            if not os.path.exists(download_dir):
                os.makedirs(download_dir)
            
            downloaded_images = []
            
            for post in posts:
                for i, img_url in enumerate(post["images"]):
                    try:
                        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
                        filename = f"{post['url'].split('/')[-2]}_{i+1}.jpg"
                        filepath = os.path.join(download_dir, filename)
                        
                        # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                        response = requests.get(img_url, timeout=30)
                        if response.status_code == 200:
                            with open(filepath, 'wb') as f:
                                f.write(response.content)
                            
                            downloaded_images.append({
                                "url": img_url,
                                "local_filename": filename,
                                "local_path": filepath,
                                "file_size": len(response.content),
                                "downloaded_at": datetime.now().isoformat()
                            })
                            
                            print(f"‚¨áÔ∏è –°–∫–∞—á–∞–Ω–æ: {filename}")
                        
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è {img_url}: {e}")
            
            return downloaded_images
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}")
            return []
    
    def save_to_mongodb(self, posts: List[Dict], downloaded_images: List[Dict]) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ MongoDB"""
        try:
            for post in posts:
                for img_data in downloaded_images:
                    if img_data["url"] in post["images"]:
                        doc = {
                            "url": img_data["url"],
                            "post_url": post["url"],
                            "publication_date": post["timestamp"],
                            "likes": post["likes"],
                            "comments": post["comments"],
                            "caption": post["caption"],
                            "hashtags": post["hashtags"],
                            "account_name": post.get("username", "N/A"),
                            "local_filename": img_data["local_filename"],
                            "local_path": img_data["local_path"],
                            "file_size": img_data["file_size"],
                            "downloaded_at": img_data["downloaded_at"],
                            "full_image_url": f"http://158.160.19.119/images/{img_data['local_filename']}"
                        }
                        
                        self.collection.insert_one(doc)
            
            print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(downloaded_images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ MongoDB")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ MongoDB: {e}")
            return False
    
    def run_full_parsing(self, username: str, password: str, posts_limit: int = 100) -> bool:
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        try:
            print(f"üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –ü–ê–†–°–ò–ù–ì–ê –î–õ–Ø @{username}")
            print("=" * 60)
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ WebDriver
            if not self.setup_driver():
                return False
            
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
            if not self.connect_mongodb():
                return False
            
            # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
            if not self.login_instagram(username, password):
                return False
            
            # –ü–∞—Ä—Å–∏–Ω–≥ –∞–∫–∫–∞—É–Ω—Ç–∞
            posts = self.parse_account(username, posts_limit)
            if not posts:
                return False
            
            # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            downloaded_images = self.download_images(posts)
            if not downloaded_images:
                return False
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ MongoDB
            if not self.save_to_mongodb(posts, downloaded_images):
                return False
            
            print("üéâ –ü–ê–†–°–ò–ù–ì –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
            return False
        finally:
            if self.driver:
                self.driver.quit()
            if self.client:
                self.client.close()

if __name__ == "__main__":
    parser = InstagramSeleniumParser()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    username = input("üë§ –í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Instagram: ").strip()
    password = input("üîê –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å Instagram: ").strip()
    posts_limit = int(input("üì• –õ–∏–º–∏—Ç –ø–æ—Å—Ç–æ–≤ (Enter –¥–ª—è 100): ") or "100")
    
    # –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞
    parser.run_full_parsing(username, password, posts_limit)


