#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ MongoDB
"""

import os
from dotenv import load_dotenv
from pymongo import MongoClient
import requests
from PIL import Image
import io

load_dotenv()

def analyze_images():
    """–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ MongoDB"""
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
    mongodb_uri = "mongodb://localhost:27017/"
    client = MongoClient(mongodb_uri)
    db = client.instagram_gallery
    collection = db.images
    
    print("üîç –ê–ù–ê–õ–ò–ó –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô –í MONGODB")
    print("=" * 50)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    images = list(collection.find())
    print(f"üì∏ –í—Å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(images)}")
    
    for i, img in enumerate(images[:5], 1):  # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 5
        print(f"\nüñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {i}:")
        print(f"   ‚Ä¢ ID: {img['_id']}")
        print(f"   ‚Ä¢ URL: {img.get('full_image_url', 'N/A')}")
        print(f"   ‚Ä¢ –õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª: {img.get('local_filename', 'N/A')}")
        print(f"   ‚Ä¢ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {img.get('file_size', 'N/A')} –±–∞–π—Ç")
        print(f"   ‚Ä¢ –î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {img.get('publication_date', 'N/A')}")
        print(f"   ‚Ä¢ –õ–∞–π–∫–∏: {img.get('likes', 'N/A')}")
        print(f"   ‚Ä¢ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {img.get('comments', 'N/A')}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–≥–∏
        if 'ximilar_tags' in img:
            tags = img['ximilar_tags']
            print(f"   ‚Ä¢ –¢–µ–≥–∏ Ximilar: {len(tags.get('tags', []))} —Ç–µ–≥–æ–≤")
            if tags.get('tags'):
                for tag in tags['tags'][:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ç–µ–≥–∞
                    print(f"     - {tag.get('name', 'N/A')} (confidence: {tag.get('confidence', 0):.2f})")
        else:
            print(f"   ‚Ä¢ –¢–µ–≥–∏ Ximilar: –ù–ï–¢")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
        local_path = img.get('local_path', '')
        if local_path and os.path.exists(local_path):
            try:
                with Image.open(local_path) as pil_img:
                    print(f"   ‚Ä¢ –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {pil_img.size[0]}x{pil_img.size[1]}")
                    print(f"   ‚Ä¢ –§–æ—Ä–º–∞—Ç: {pil_img.format}")
                    print(f"   ‚Ä¢ –†–µ–∂–∏–º: {pil_img.mode}")
            except Exception as e:
                print(f"   ‚Ä¢ –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
        else:
            print(f"   ‚Ä¢ –õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª: –ù–ï –ù–ê–ô–î–ï–ù")
    
    client.close()

if __name__ == "__main__":
    analyze_images()
