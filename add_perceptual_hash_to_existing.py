"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è perceptual hash –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –≤ MongoDB
"""

import os
import imagehash
from PIL import Image
from pathlib import Path
from dotenv import load_dotenv
import pymongo
from tqdm import tqdm

load_dotenv()
load_dotenv('mongodb_config.env')

def calculate_perceptual_hash(image_path: str) -> str:
    """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ perceptual hash –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        image = Image.open(image_path)
        phash = imagehash.phash(image, hash_size=8)
        return str(phash)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ö–µ—à–∞ –¥–ª—è {image_path}: {e}")
        return None

def main():
    """–î–æ–±–∞–≤–ª—è–µ—Ç perceptual hash –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º"""
    print("üî¢ –î–û–ë–ê–í–õ–ï–ù–ò–ï PERCEPTUAL HASH –ö –°–£–©–ï–°–¢–í–£–Æ–©–ò–ú –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø–ú")
    print("="*70)
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ MongoDB
    mongodb_uri = os.getenv('MONGODB_URI', 'mongodb://trend_ai_user:LoGRomE2zJ0k0fuUhoTn@localhost:27017/instagram_gallery')
    client = pymongo.MongoClient(mongodb_uri)
    db = client["instagram_gallery"]
    collection = db["images"]
    
    print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–µ–∑ perceptual hash
    images_without_hash = list(collection.find({
        "local_filename": {"$exists": True},
        "image_hash": {"$exists": False}
    }))
    
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(images_without_hash)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–µ–∑ perceptual hash")
    
    if len(images_without_hash) == 0:
        print("‚úÖ –í—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —É–∂–µ –∏–º–µ—é—Ç perceptual hash!")
        return
    
    images_dir = Path("images")
    updated_count = 0
    failed_count = 0
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    for img_doc in tqdm(images_without_hash, desc="–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"):
        try:
            filename = img_doc.get("local_filename")
            if not filename:
                continue
            
            filepath = images_dir / filename
            
            if not filepath.exists():
                print(f"‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {filepath}")
                failed_count += 1
                continue
            
            # –í—ã—á–∏—Å–ª—è–µ–º perceptual hash
            image_hash = calculate_perceptual_hash(str(filepath))
            
            if image_hash:
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –≤ MongoDB
                collection.update_one(
                    {"_id": img_doc["_id"]},
                    {"$set": {"image_hash": image_hash}}
                )
                updated_count += 1
            else:
                failed_count += 1
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {img_doc.get('local_filename', 'N/A')}: {e}")
            failed_count += 1
    
    print(f"\n{'='*70}")
    print(f"‚úÖ –ó–ê–í–ï–†–®–ï–ù–û!")
    print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {updated_count}")
    print(f"‚ùå –û—à–∏–±–æ–∫: {failed_count}")
    print(f"{'='*70}")
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è image_hash
    print("üî® –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –¥–ª—è image_hash...")
    collection.create_index("image_hash")
    print("‚úÖ –ò–Ω–¥–µ–∫—Å —Å–æ–∑–¥–∞–Ω!")

if __name__ == "__main__":
    main()

